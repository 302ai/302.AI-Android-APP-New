package com.newAi302.app.ui

import android.annotation.SuppressLint
import android.app.Dialog
import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.content.res.Configuration
import android.content.res.Resources
import android.graphics.Color
import android.net.Uri
import android.net.http.SslError
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.Gravity
import android.view.LayoutInflater
import android.view.View
import android.view.WindowManager
import android.webkit.SslErrorHandler
import android.webkit.ValueCallback
import android.webkit.WebChromeClient
import android.webkit.WebResourceError
import android.webkit.WebResourceRequest
import android.webkit.WebSettings
import android.webkit.WebView
import android.webkit.WebViewClient
import android.widget.Button
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.activity.viewModels
import androidx.annotation.RequiresExtension
import androidx.appcompat.app.AppCompatActivity
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.bumptech.glide.request.RequestOptions
import com.github.lzyzsd.jsbridge.BridgeHandler
import com.github.lzyzsd.jsbridge.BridgeWebView
import com.github.lzyzsd.jsbridge.CallBackFunction
import com.github.lzyzsd.jsbridge.DefaultHandler
import com.google.android.material.bottomsheet.BottomSheetBehavior
import com.google.android.material.bottomsheet.BottomSheetDialog
import com.google.gson.Gson
import com.newAi302.app.MainActivity
import com.newAi302.app.MyApplication
import com.newAi302.app.R
import com.newAi302.app.adapter.EmojiAdapter
import com.newAi302.app.base.BaseActivity
import com.newAi302.app.bean.HtmlChargeJsonBean
import com.newAi302.app.bean.HtmlProxyJsonBean
import com.newAi302.app.bean.HtmlQuickAccessBean
import com.newAi302.app.constant.AppConstant
import com.newAi302.app.data.MainMessage
import com.newAi302.app.databinding.ActivityMainBinding
import com.newAi302.app.databinding.ActivitySettingBinding
import com.newAi302.app.datastore.DataStoreManager
import com.newAi302.app.http.ApiService
import com.newAi302.app.http.NetworkFactory
import com.newAi302.app.network.common_bean.callback.LoginCallback
import com.newAi302.app.network.common_bean.callback.ResponseAliData
import com.newAi302.app.network.common_bean.callback.ResponseStripeData
import com.newAi302.app.network.common_bean.callback.ResponseUsdtData
import com.newAi302.app.room.ChatDatabase
import com.newAi302.app.room.UserConfigurationRoom
import com.newAi302.app.ui.model.MainModel
import com.newAi302.app.utils.ActivityUtils
import com.newAi302.app.utils.DialogUtils
import com.newAi302.app.utils.LanguageUtil
import com.newAi302.app.utils.LanguageUtil.saveLanguageSetting
import com.newAi302.app.utils.LogUtils
import com.newAi302.app.utils.SystemUtils
import com.newAi302.app.utils.ToastUtils
import com.newAi302.app.utils.ViewAnimationUtils
import com.newAi302.app.utils.base.WearData
import com.newAi302.app.utils.base.WearUtil
import com.newAi302.app.viewModel.ChatViewModel
import com.newAi302.app.widget.dialog.PayDetailsDialog
import com.newAi302.app.widget.utils.CommonEnum
import com.newAi302.app.widget.utils.CommonHtmlUtil
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import org.json.JSONObject
import java.util.Locale

class SettingActivity : BaseActivity(), PayDetailsDialog.OnButtonClickListener {
    private lateinit var binding: ActivitySettingBinding
    private lateinit var dataStoreManager: DataStoreManager
    private var mPayDetailDialog: PayDetailsDialog? = null
    private var mQuickAccessBean: HtmlQuickAccessBean? = null
    private var isUSDT = false
    private var mWebView: BridgeWebView? = null
    private var payType = ""
    @Volatile
    private var personalCenter = false
    private lateinit var chatDatabase: ChatDatabase
    private lateinit var modelListNull:MutableList<String>

    private lateinit var dialogUtils: DialogUtils

    private var defaultSystemLanguage = "zh"
    private var defaultSystemTheme = "light"
    private var defaultEmoji = "\uD83D\uDE00"
    private var mUserId = ""
    private var isNewChat = false

    private val chatViewModel: ChatViewModel by viewModels()
    private val BASE_URL = "https://api.302.ai/"
    private var CUSTOMIZE_URL_TWO = "https://api.siliconflow.cn/"
    private var apiService = NetworkFactory.createApiService(ApiService::class.java,BASE_URL)
    var mLanguage = ""
    private var readImageUrl = ""

    // ÂàùÂßãÂåñË°®ÊÉÖÂàóË°®
    val emojis = listOf(
        "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üòä", "üòá",
        "üôÇ", "üôÉ", "üòâ", "üòå", "üòç", "ü•∞", "üòò", "üòó", "üòô", "üòö",
        "üòã", "üòõ", "üòù", "üòú", "ü§™", "ü§®", "üßê", "ü§ì", "üòé", "ü§©",
        "ü•≥", "üòè", "üòí", "üòû", "üòî", "üòü", "üòï", "üôÅ", "‚òπÔ∏è", "üò£",
        "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üò§", "üò†", "üò°", "ü§Ø",
        "üò≥", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó", "ü§î",
        "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üòí", "üôÑ", "üò≥", "ü§§",
        "üò™", "üò¥", "ü§¢", "ü§Æ", "ü§ß", "üò∑", "ü§í", "ü§ï", "ü§ë", "ü§†",
        "üòà", "üëø", "üëπ", "üë∫", "üíÄ", "‚ò†Ô∏è", "üëª", "üëΩ", "üëæ", "ü§ñ",
        "üí©", "üëª", "üéÉ", "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ",
        "üòø", "üòæ", "üëê", "üëè", "ü§ù", "üëç", "üëé", "‚úä", "üëä", "ü§õ", "ü§ú",
        "ü§û", "‚úåÔ∏è", "ü§ü", "üëå", "üëà", "üëâ", "üëÜ", "üëá", "‚òùÔ∏è", "‚úã",
        "ü§ö", "üñêÔ∏è", "üññ", "üëã", "ü§ô", "üí™", "ü¶æ", "üëÇ", "ü¶ª", "üëÉ",
        "üëÅÔ∏è", "üëÄ", "üëÖ", "üëÑ", "üë∂", "üßí", "üë¶", "üëß", "üë®", "üë©",
        "üßë", "üë¥", "üëµ", "üë±", "üëÆ", "üïµÔ∏è", "üë©‚Äç‚öïÔ∏è", "üë®‚Äç‚öïÔ∏è", "üë©‚Äçüåæ", "üë®‚Äçüåæ",
        "üë©‚Äçüç≥", "üë®‚Äçüç≥", "üë©‚Äçüéì", "üë®‚Äçüéì", "üë©‚Äçüé§", "üë®‚Äçüé§", "üë©‚Äçüíª", "üë®‚Äçüíª", "üë©‚Äçüè´", "üë®‚Äçüè´",
        "üë©‚Äç‚öñÔ∏è", "üë®‚Äç‚öñÔ∏è", "üë©‚Äçüöí", "üë®‚Äçüöí", "üë©‚Äç‚úàÔ∏è", "üë®‚Äç‚úàÔ∏è", "üë©‚ÄçüöÄ", "üë®‚ÄçüöÄ", "üë©‚Äç‚öôÔ∏è", "üë®‚Äç‚öôÔ∏è",
        "üë©‚Äçüîß", "üë®‚Äçüîß", "üë©‚Äçüé®", "üë®‚Äçüé®", "üë©‚Äçüè≠", "üë®‚Äçüè≠", "üë©‚Äçüíº", "üë®‚Äçüíº", "üë©‚Äçüî¨", "üë®‚Äçüî¨",
        "üë©‚Äçüíª", "üë®‚Äçüíª", "üë©‚Äçüéì", "üë®‚Äçüéì", "üë©‚Äçüè´", "üë®‚Äçüè´", "üë©‚Äç‚öïÔ∏è", "üë®‚Äç‚öïÔ∏è", "üë©‚Äçüîß", "üë®‚Äçüîß",
        "üë©‚Äçüé§", "üë®‚Äçüé§", "üë©‚Äçüöí", "üë®‚Äçüöí", "üë©‚Äç‚úàÔ∏è", "üë®‚Äç‚úàÔ∏è", "üë©‚ÄçüöÄ", "üë®‚ÄçüöÄ", "üë©‚Äç‚öñÔ∏è", "üë®‚Äç‚öñÔ∏è"
    )
    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override fun onCreate(savedInstanceState: Bundle?) {
        setTheme(R.style.Theme_Ai302)
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        //setContentView(R.layout.activity_setting)
        binding = ActivitySettingBinding.inflate(layoutInflater)
        setContentView(binding.root)
        chatDatabase = ChatDatabase.getInstance(this)
        dataStoreManager = DataStoreManager(MyApplication.myApplicationContext)
        val newChat = intent.getSerializableExtra("chat_new") as? Boolean
        if (newChat != null){
           isNewChat = newChat
        }
        chatViewModel.userInfoResult.observe(this){
            it.let {
                binding.userBalanceTv.text = it.balance.toString()
                lifecycleScope.launch(Dispatchers.IO) {
                    dataStoreManager.saveUserBalance(it.balance)
                }
            }
        }
        initView()
    }

    override fun onStop() {
        super.onStop()
        lifecycleScope.launch(Dispatchers.IO) {
            val userId = dataStoreManager.readUserEmailData.first()?:""
            var userConfigurationRoom = chatDatabase.chatDao().getUserConfigByUserId(userId)
            userConfigurationRoom?.appEmojisData = defaultEmoji
            userConfigurationRoom?.systemLanguage = defaultSystemLanguage
            userConfigurationRoom?.systemTheme = defaultSystemTheme

//            userConfigurationRoom?.let {
//                chatDatabase.chatDao().insertUserConfig(
//                    UserConfigurationRoom(0,userConfigurationRoom.userId,userConfigurationRoom.systemLanguage,"light",readUseTracelessSwitch,
//                        readSlideBottomSwitch,readAppEmojisData,readSearchServiceType,readModelType,readBuildTitleModelType,modelList,readBuildTitleTime)
//                )
//            }



        }
    }

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    private fun initView(){
        dialogUtils = DialogUtils {
            Log.e("ceshi","ÂºπÁ™óËøîÂõû$it")
            when(it){
                /*ContextCompat.getString(this@SettingActivity, R.string.language_ch_message) -> {
                    binding.systemLanguageTV.text = ContextCompat.getString(this@SettingActivity, R.string.language_ch_message)
//                    lifecycleScope.launch(Dispatchers.IO) {
//                        dataStoreManager.saveBuildTitleTimeData("Á¨¨‰∏ÄÊ¨°ÂØπËØù")
//                    }
                    switchLanguage(LanguageUtil.LANGUAGE_ZH)
                    applyLanguage()
                    //onLanguageChange()
                    defaultSystemLanguage = "zh"
                }
                ContextCompat.getString(this@SettingActivity, R.string.language_en_message) -> {
                    binding.systemLanguageTV.text = ContextCompat.getString(this@SettingActivity, R.string.language_en_message)
                    switchLanguage(LanguageUtil.LANGUAGE_EN)
                    applyLanguage()
                    //onLanguageChange()
                    defaultSystemLanguage = "en"
                }

                ContextCompat.getString(this@SettingActivity, R.string.language_ja_message) -> {
                    binding.systemLanguageTV.text = ContextCompat.getString(this@SettingActivity, R.string.language_ja_message)
                    switchLanguage(LanguageUtil.LANGUAGE_JA)
                    applyLanguage()
                    //onLanguageChange()
                    defaultSystemLanguage = "ja"
                }*/
                "‰∏≠Êñá" -> {
                    binding.systemLanguageTV.text = "‰∏≠Êñá"
//                    lifecycleScope.launch(Dispatchers.IO) {
//                        dataStoreManager.saveBuildTitleTimeData("Á¨¨‰∏ÄÊ¨°ÂØπËØù")
//                    }
                    switchLanguage(LanguageUtil.LANGUAGE_ZH)
                    applyLanguage()
                    //onLanguageChange()
                    defaultSystemLanguage = "zh"
                }
                "English" -> {
                    binding.systemLanguageTV.text = "English"
                    switchLanguage(LanguageUtil.LANGUAGE_EN)
                    applyLanguage()
                    //onLanguageChange()
                    defaultSystemLanguage = "en"
                }

                "Êó•Êú¨Ë™û" -> {
                    binding.systemLanguageTV.text = "Êó•Êú¨Ë™û"
                    switchLanguage(LanguageUtil.LANGUAGE_JA)
                    applyLanguage()
                    //onLanguageChange()
                    defaultSystemLanguage = "ja"
                }


            }
        }

        binding.historyImage.setOnClickListener {
            ViewAnimationUtils.performClickEffect(it)
            lifecycleScope.launch(Dispatchers.IO) {
                //val chatItemHistory = chatDatabase.chatDao().getLastChatItem()
                //val chatItemHistory = chatDatabase.chatDao().getChatsByUserId(mUserId).last()
                // 1. ÂÖàËé∑ÂèñÂàóË°®Ôºà‰∏çË¶ÅÁõ¥Êé•ÈìæÂºèË∞ÉÁî® last()Ôºâ
                val chatList = chatDatabase.chatDao().getChatsByUserId(mUserId)

                // 2. Ê£ÄÊü•ÂàóË°®ÊòØÂê¶‰∏∫Á©∫
                val chatItemHistory = if (chatList.isNotEmpty()) {
                    // ÂàóË°®ÈùûÁ©∫ÔºåÂÆâÂÖ®Ëé∑ÂèñÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†
                    chatList.last()
                } else {
                    // ÂàóË°®‰∏∫Á©∫ÔºåÊ†πÊçÆ‰∏öÂä°ÈúÄÊ±ÇÂ§ÑÁêÜÔºàÂ¶ÇËøîÂõû null ÊàñÈªòËÆ§ÂÄºÔºâ
                    null
                }
                val intent = Intent(this@SettingActivity, MainActivity::class.java)
                if (chatItemHistory != null){
                    if (!isNewChat){
                        intent.putExtra("setting_chat_item", chatItemHistory)
                    }
                }
                val botMsg = getString(R.string.front_page_bottom_message)
                val welMsg = getString(R.string.front_page_message)
                val sendMsg = getString(R.string.chat_edit_message)

                intent.putExtra("msg_setting",MainMessage(welMsg,sendMsg,botMsg,readImageUrl))
                Log.e("ceshi","ÂèëÈÄÅÂâçÔºö${welMsg}")
                startActivity(intent)
                finish()
            }

        }
        binding.toAnnouncementConst.setOnClickListener {
            val intent = Intent(this, AnnouncementActivity::class.java)
            startActivity(intent)
        }
        binding.toServiceConst.setOnClickListener {
            // Â§ÑÁêÜÁÇπÂáª‰∫ã‰ª∂
            //android.widget.Toast.makeText(context, "‰Ω†ÁÇπÂáª‰∫ÜÂÆòÁΩëÂú∞ÂùÄ", android.widget.Toast.LENGTH_SHORT).show()
            val intent = Intent(Intent.ACTION_VIEW)
            intent.data = Uri.parse("https://302.ai/") // ËÆæÁΩÆË¶ÅË∑≥ËΩ¨ÁöÑÁΩëÂùÄ
            this.startActivity(intent) // ÂêØÂä®Ê¥ªÂä®
        }
        binding.toModelManagerConst.setOnClickListener {
            val intent = Intent(this, ModelManagerActivity::class.java)
            startActivity(intent)
        }
        val systemLanguage = SystemUtils.getSystemLanguage(this)
        val systemThem = SystemUtils.getSystemTheme(this)
        Log.e("ceshi","Á≥ªÁªü$systemLanguage,$systemThem")
//        if (systemLanguage == "‰∏≠Êñá (‰∏≠ÂõΩ)"){
//            binding.systemLanguageTV.text = "ÁÆÄ‰Ωì‰∏≠Êñá"
//        }else if (systemLanguage == "English (United States)"){
//            binding.systemLanguageTV.text = "English"
//        }
        val language = LanguageUtil.getSavedLanguage(this)
        Log.e("ceshi","Ëé∑ÂèñÁöÑËØ≠Ë®ÄÊòØ:$language")
        mLanguage = language
        defaultSystemLanguage = language
        when (language) {
            LanguageUtil.LANGUAGE_ZH -> binding.systemLanguageTV.text = "ÁÆÄ‰Ωì‰∏≠Êñá"
            LanguageUtil.LANGUAGE_JA -> binding.systemLanguageTV.text = "Êó•Êú¨Ë™û"
            else -> binding.systemLanguageTV.text = "English"
        }
        if (systemThem == "ÊµÖËâ≤Ê®°Âºè"){
            binding.systemThemeTv.text = "light"
        }else if (systemThem == "Ê∑±Ëâ≤Ê®°Âºè"){
            binding.systemThemeTv.text = "night"
        }
        binding.systemLanguageCons.setOnClickListener {
            //SystemUtils.openLanguageSettings(this)
            /*val options = mutableListOf(ContextCompat.getString(this@SettingActivity, R.string.language_ch_message),
                ContextCompat.getString(this@SettingActivity, R.string.language_en_message),
                ContextCompat.getString(this@SettingActivity, R.string.language_ja_message))*/
            val options = mutableListOf("‰∏≠Êñá","English","Êó•Êú¨Ë™û")
            dialogUtils.setupPopupWindow(options,"languageTypeList",this)
            dialogUtils.showPopup(binding.systemLanguageLine)
        }
        binding.systemThemeCons.setOnClickListener {
            SystemUtils.openThemeSettings(this)
        }

        binding.toPreferencesCons.setOnClickListener {
            val intent = Intent(this, PreferencesActivity::class.java)
            startActivity(intent)
        }

        /*binding.imageProfile.setOnClickListener {
            showEmojiPickerDialog()
        }*/
        binding.detailsCons.setOnClickListener {
            val intent = Intent(this, ConsumptionDetailsActivity::class.java)
            startActivity(intent)
        }


        binding.logoutBtn.setOnClickListener {
            insertUserConfiguration()
            lifecycleScope.launch(Dispatchers.IO) {
                dataStoreManager.saveData("")
                WearData.getInstance().saveToken("")
            }
            val botMsg = getString(R.string.front_page_bottom_message)
            val welMsg = getString(R.string.front_page_message)
            val sendMsg = getString(R.string.chat_edit_message)
            val intent = Intent(this, MainActivity::class.java)
            intent.putExtra("come_from","setting")
            intent.putExtra("msg_setting",MainMessage(welMsg,sendMsg,botMsg,readImageUrl))
            startActivity(intent)
            finish()
        }

        binding.versionConst.setOnClickListener {
            val intent = Intent(this, VersionUpdateActivity::class.java)
            startActivity(intent)
        }
        binding.protocolConst.setOnClickListener {
            val intent = Intent(this, ProtocolActivity::class.java)
            startActivity(intent)
        }

        binding.payBtn.setOnClickListener {
//            val intent = Intent(this, PayActivity::class.java)
//            startActivity(intent)

            showBottomPayDialog(this@SettingActivity)

            /*mPayDetailDialog = PayDetailsDialog(this@SettingActivity, mQuickAccessBean)
            // ‰∏∫ BottomSheetDialog ËÆæÁΩÆÂ∏ÉÂ±Ä
            val view: View = layoutInflater.inflate(R.layout.dialog_pay_details, null)
            mPayDetailDialog?.setContentView(view)
            mPayDetailDialog?.show()

            // Ëé∑ÂèñÂ∏ÉÂ±Ä‰∏≠ÁöÑ ButtonÔºåÂπ∂ËÆæÁΩÆÁÇπÂáª‰∫ã‰ª∂
            val brWebView = view.findViewById<BridgeWebView>(R.id.webViewUrl)
            mWebView = brWebView

            //brWebView.visibility = View.VISIBLE
            loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,"https://302.ai/charge",mWebView!!)

            //view.findViewById<LinearLayout>(R.id.ll_pay).visibility = View.GONE




//            val chargeJsonBean = Gson().fromJson(data, HtmlChargeJsonBean::class.java)
//            if (chargeJsonBean != null) {
//                LogUtils.e(
//                    "ceshi ËæìÂá∫ÁöÑÊï∞ÊçÆÁ±ªÂûãÊòØ‰ªÄ‰πà===========Ôºö",
//                    chargeJsonBean.note,
//                    chargeJsonBean.id
//                )
//
//            }

            val chargeId = 1
            mPayDetailDialog?.setOnButtonClickListener(object : PayDetailsDialog.OnButtonClickListener {
                override fun onButtonClick(buttonText: String) {
                    Log.e("ceshi","onButtonClick$buttonText")
                    when (buttonText) {
                        "aliPay" -> {
                            ToastUtils.showLong(resources.getString(R.string.toast_loading))
                            MainModel.getAliPayUrl(chargeId, object : LoginCallback {
                                override fun onSuccess(responseBody: String?) {
                                    val gson = Gson()
                                    Log.e("ceshi","ali+++++${responseBody}")
                                    val response = gson.fromJson(responseBody, ResponseAliData::class.java)
                                    Log.e("ceshi","ali+++++${response.data.to}")
                                    runOnUiThread {
                                        //loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.to)
                                        val intent = Intent(Intent.ACTION_VIEW)
                                        intent.setData(Uri.parse(response.data.to))
                                        ActivityUtils.startActivity(intent)
                                    }

                                }

                                override fun onFailure(errorCode: Int, errorMessage: String?) {
                                    Log.e("ceshi","ali----")
                                }

                            })


                        }
                        "usdtPay" -> {
                            ToastUtils.showLong(resources.getString(R.string.toast_loading))
                            MainModel.getUstdurl(chargeId, object : LoginCallback {
                                override fun onSuccess(responseBody: String?) {
                                    val gson = Gson()
                                    Log.e("ceshi","ali+++++${responseBody}")
                                    val response = gson.fromJson(responseBody, ResponseUsdtData::class.java)
                                    Log.e("ceshi","ali+++++${response.data.url}")
                                    runOnUiThread {
                                        //loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.url)
                                        //mPayDetailDialog?.setUrlListener(response.data.url)
                                        Log.e("ceshi","++url${response.data.url}")
                                        //mBinding?.incMain?.webViewPay?.evaluateJavascript("document.body.innerHTML = \"\";", null)

                                        /*mBinding?.incMain?.webViewPay?.loadUrl(response.data.url)
                                        lifecycleScope.launch(Dispatchers.Main) {
                                            // Âª∂Ëøü1ÁßíÔºà1000ÊØ´ÁßíÔºâ
                                            delay(1300)
                                            mBinding?.incMain?.webView?.visibility = View.GONE
                                            mBinding?.incMain?.webViewPay?.visibility = View.VISIBLE
                                        }*/
                                    }
                                    //isUSDT = true

                                }

                                override fun onFailure(errorCode: Int, errorMessage: String?) {
                                    Log.e("ceshi","ali----")
                                }

                            })
                        }
                        "stripePay" -> {
                            ToastUtils.showLong(resources.getString(R.string.toast_loading))
                            //payType = "stripePay"
                            MainModel.getStripeKey(chargeId, object : LoginCallback {
                                override fun onSuccess(responseBody: String?) {
                                    Log.e("ceshi","stripe++++")
                                    val gson = Gson()
                                    Log.e("ceshi","ali+++++${responseBody}")
                                    val response = gson.fromJson(responseBody, ResponseStripeData::class.java)
                                    var publishableKey = ""
                                    publishableKey = response.data.jk+response.data.hk+response.data.pk+response.data.a
                                    Log.e("ceshi","ali+++++${publishableKey}")
                                    //sendDataToJavaScript(publishableKey)
                                    var url = "https://dash.proxy302.com/stripe?pk=$publishableKey&sid=${response.data.session_id}"
                                    Log.e("ceshi","url++++${url}")

                                    runOnUiThread {
                                        /*mWebView?.webViewClient = object : WebViewClient() {
                                            override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {
                                                Log.e("ceshi","url+++++${url}")
                                                if (url == "https://dash.proxy302.com/charge") {//https://dash.proxy302.com/charge
                                                    // Âú®ËøôÈáåÂèØ‰ª•ËøõË°å‰Ω†ÊÉ≥Ë¶ÅÁöÑÊìç‰ΩúÔºåÊØîÂ¶ÇËÆ∞ÂΩïÊó•Âøó„ÄÅÊõ¥Êñ∞UIÁ≠â
                                                    Log.d("ceshi", "ÁõëÂê¨Âà∞Ë∑≥ËΩ¨Âà∞https://dash.proxy302.com/webapp/charge")
                                                    loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,"https://dash.proxy302.com/webapp/charge")
                                                }
                                                return super.shouldOverrideUrlLoading(view, url)
                                            }
                                        }*/
                                        //loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,url)
                                        //mPayDetailDialog?.setUrlListener(url)
                                        Log.e("ceshi","--url${url}")
                                        //loadWebHandler1(url)
                                    }
                                }

                                override fun onFailure(errorCode: Int, errorMessage: String?) {
                                    Log.e("ceshi","stripe----")
                                }

                            })
                        }
                    }
                }

            })*/
            /*MainModel.getAliPayUrl(chargeJsonBean.id, object : LoginCallback {
                override fun onSuccess(responseBody: String?) {
                    val gson = Gson()
                    Log.e("ceshi","ali+++++${responseBody}")
                    val response = gson.fromJson(responseBody, ResponseAliData::class.java)
                    Log.e("ceshi","ali+++++${response.data.to}")
                    runOnUiThread {
                        //loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.to)
                        /*val intent = Intent(Intent.ACTION_VIEW)
                        intent.setData(Uri.parse(response.data.to))
                        ActivityUtils.startActivity(intent)*/
                    }

                }

                override fun onFailure(errorCode: Int, errorMessage: String?) {
                    Log.e("ceshi","ali----")
                }

            })*/

            /*MainModel.getUstdurl(chargeJsonBean.id, object : LoginCallback {
                override fun onSuccess(responseBody: String?) {
                    val gson = Gson()
                    Log.e("ceshi","ali+++++${responseBody}")
                    val response = gson.fromJson(responseBody, ResponseUsdtData::class.java)
                    Log.e("ceshi","ali+++++${response.data.url}")
                    runOnUiThread {
                        loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.url)
                        /*val intent = Intent(Intent.ACTION_VIEW)
                        intent.setData(Uri.parse(response.data.to))
                        ActivityUtils.startActivity(intent)*/
                    }

                }

                override fun onFailure(errorCode: Int, errorMessage: String?) {
                    Log.e("ceshi","ali----")
                }

            })*/



        }

        binding.cons0.setOnClickListener {
            val intent = Intent(this, PersonalCenterActivity::class.java)
            startActivity(intent)
        }

        binding.clearChatConst.setOnClickListener {
            ViewAnimationUtils.performClickEffect(it)
            lifecycleScope.launch (Dispatchers.IO){
                chatDatabase.chatDao().deleteAllChatsByUserId(mUserId)
            }
        }



    }

    override fun onResume() {
        super.onResume()
        val systemThem = SystemUtils.getSystemTheme(this)
        Log.e("ceshi","Á≥ªÁªü‰∏ªÈ¢ò,$systemThem")
        if (systemThem == "ÊµÖËâ≤Ê®°Âºè"){
            binding.systemThemeTv.text = "light"
        }else if (systemThem == "Ê∑±Ëâ≤Ê®°Âºè"){
            binding.systemThemeTv.text = "night"
        }

        lifecycleScope.launch((Dispatchers.IO)) {

            /*val readAppEmojisData = dataStoreManager.readAppEmojisData.first()
            readAppEmojisData?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                    Log.e("setting","readAppEmojisDataÊòØÂ§öÂ∞ëÔºö$it")
                    binding.imageProfile.text = it
                }
            }*/
            val data = dataStoreManager.readImageUrl.first()
            data?.let {
                Log.e("ceshi", "imageurlÊòØ‰∏™Â§öÂ∞ëÔºö$it")
                readImageUrl = it
                lifecycleScope.launch(Dispatchers.Main) {
                    // ÊñπÊ≥ï1Ôºö‰ΩøÁî®ÂÜÖÁΩÆÁöÑCircleCropÂèòÊç¢
                    Glide.with(this@SettingActivity)
                        .load(it)
                        .apply(RequestOptions.circleCropTransform())
                        .placeholder(android.R.drawable.ic_menu_gallery)
                        .error(android.R.drawable.stat_notify_error)
                        .into(binding.imageProfile)
                }

            }

            val readUserNameData = dataStoreManager.readUserNameData.first()
            readUserNameData?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                    Log.e("setting","readUserNameDataÔºö$it")
                    binding.userSettingTv.text = it
                }
            }

            val readUserBalanceData = dataStoreManager.readUserBalanceData.first()
            readUserBalanceData?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                    Log.e("setting","readUserNameDataÔºö$it")
                    binding.userBalanceTv.text = it.toString()
                }
            }

            val readUserEmailData = dataStoreManager.readUserEmailData.first()
            readUserEmailData?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                    Log.e("setting","readUserEmailDataÔºö$it")
                    binding.userIdSettingTv.text = it
                    mUserId = readUserEmailData
                }
            }



        }
    }


    private fun showEmojiPickerDialog() {
        val dialog = Dialog(this)
        dialog.setContentView(R.layout.dialog_emoji_picker)
        dialog.window?.setLayout(
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.WRAP_CONTENT
        )
        dialog.window?.setGravity(Gravity.BOTTOM)
        dialog.window?.attributes?.windowAnimations = R.style.DialogAnimation

        var recyclerView = dialog.findViewById<RecyclerView>(R.id.emojiRecyclerView)
        recyclerView.layoutManager = GridLayoutManager(this, 4)
        recyclerView.adapter = EmojiAdapter(emojis) { selectedEmoji ->
            // Êõ¥Êñ∞TextViewÊòæÁ§∫ÈÄâ‰∏≠ÁöÑË°®ÊÉÖ
            //binding.imageProfile.text = selectedEmoji
            defaultEmoji = selectedEmoji
            lifecycleScope.launch(Dispatchers.IO) {
                dataStoreManager.saveAppEmojisData(selectedEmoji)
            }

            // Ê∑ªÂä†ÈÄâ‰∏≠Âä®ÁîªÊïàÊûú
            binding.imageProfile.scaleX = 0.8f
            binding.imageProfile.scaleY = 0.8f
            binding.imageProfile.animate()
                .scaleX(1.2f)
                .scaleY(1.2f)
                .setDuration(150)
                .withEndAction {
                    binding.imageProfile.animate()
                        .scaleX(1f)
                        .scaleY(1f)
                        .setDuration(150)
                        .start()
                }
                .start()

            dialog.dismiss()
        }

        dialog.findViewById<Button>(R.id.cancelButton).setOnClickListener {
            dialog.dismiss()
        }

        dialog.show()
    }

    override fun onDestroy() {
        super.onDestroy()
        if (mPayDetailDialog != null) {
            mPayDetailDialog?.dismiss()
        }
    }

    override fun onButtonClick(buttonText: String) {
        // Âú®ËøôÈáåÂ§ÑÁêÜ‰ªéDialogÂõûË∞ÉËøáÊù•ÁöÑÂèÇÊï∞
        Log.e("ceshi","onButtonClick$buttonText")
        val chargeId = 0
        when (buttonText) {
            "aliPay" -> {
                MainModel.getAliPayUrl(chargeId, object : LoginCallback {
                    override fun onSuccess(responseBody: String?) {
                        val gson = Gson()
                        Log.e("ceshi","ali+++++${responseBody}")
                        val response = gson.fromJson(responseBody, ResponseAliData::class.java)
                        Log.e("ceshi","ali+++++${response.data.to}")
                        runOnUiThread {
                            //loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.to)
                            val intent = Intent(Intent.ACTION_VIEW)
                            intent.setData(Uri.parse(response.data.to))
                            ActivityUtils.startActivity(intent)
                        }

                    }

                    override fun onFailure(errorCode: Int, errorMessage: String?) {
                        Log.e("ceshi","ali----")
                    }

                })


            }
            "usdtPay" -> {
                MainModel.getUstdurl(chargeId, object : LoginCallback {
                    override fun onSuccess(responseBody: String?) {
                        val gson = Gson()
                        Log.e("ceshi","ali+++++${responseBody}")
                        val response = gson.fromJson(responseBody, ResponseUsdtData::class.java)
                        Log.e("ceshi","ali+++++${response.data.url}")
                        runOnUiThread {
                            //loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.url)
                        }

                    }

                    override fun onFailure(errorCode: Int, errorMessage: String?) {
                        Log.e("ceshi","ali----")
                    }

                })
            }
            "stripePay" -> {
                //payType = "stripePay"
            }
        }
    }


    /**
     * Âä†ËΩΩwebViewÈìæÊé•
     * @param type       Âä†ËΩΩÁ±ªÂûã
     * @param htmlUrl    Âä†ËΩΩË∑ØÂæÑ
     */
    @SuppressLint("SetJavaScriptEnabled", "JavascriptInterface")
    private fun loadWebHandler(type: Int, htmlUrl: String,mWebView: BridgeWebView) {
        mWebView?.settings?.javaScriptEnabled = true
//        mWebView?.settings?.databaseEnabled = true //Êï∞ÊçÆÂ∫ìÁºìÂ≠ò
        mWebView?.settings?.setGeolocationEnabled(true) // ÂÖÅËÆ∏ÁΩëÈ°µÂÆö‰Ωç
        mWebView?.settings?.loadsImagesAutomatically = true // Âä†Âø´ÁΩëÈ°µÂä†ËΩΩÂÆåÊàêÁöÑÈÄüÂ∫¶ÔºåÁ≠âÈ°µÈù¢ÂÆåÊàêÂÜçÂä†ËΩΩÂõæÁâá
        mWebView?.settings?.domStorageEnabled = true       // ÂºÄÂêØ localStorage
        mWebView?.setDefaultHandler(DefaultHandler())
        mWebView?.webChromeClient = WebChromeClient()

        mWebView?.webChromeClient = object : WebChromeClient() {
            // For Android >= 5.0
            override fun onShowFileChooser(
                webView: WebView,
                filePathCallback: ValueCallback<Array<Uri?>?>,
                fileChooserParams: FileChooserParams
            ): Boolean {

//                try {
//                    val intent = fileChooserParams?.createIntent()?:return super.onShowFileChooser(webView,filePathCallback,fileChooserParams)
//                    uploadMessageAboveL = filePathCallback
//                    launcher.launch(intent)
//                } catch (e: ActivityNotFoundException) {
//                    uploadMessageAboveL = null
//                    return false
//                }
                return true
            }

            override fun onReceivedTitle(view: WebView?, title: String?) {
                super.onReceivedTitle(view, title)
                Log.e("ceshi","onReceivedTitle$title${view?.url}")
                if (view?.url == "https://dash-api.302.ai/charge") {//https://dash.proxy302.com/charge
                    // Âú®ËøôÈáåÂèØ‰ª•ËøõË°å‰Ω†ÊÉ≥Ë¶ÅÁöÑÊìç‰ΩúÔºåÊØîÂ¶ÇËÆ∞ÂΩïÊó•Âøó„ÄÅÊõ¥Êñ∞UIÁ≠â
                    isUSDT = false
                    Log.d("ceshi", "ÁõëÂê¨Âà∞Ë∑≥ËΩ¨Âà∞https://dash.proxy302.com/webapp/charge")//https://302.ai/charge
                    //loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,"https://dash.proxy302.com/webapp/charge",mWebView)
                }
            }

        }

        mWebView?.apply {
            settings.javaScriptEnabled = true // Á°Æ‰øù JS ÂêØÁî®ÔºàÈÉ®ÂàÜÁΩëÁ´ô‰æùËµñ JS Âä†ËΩΩÔºâ
            settings.domStorageEnabled = true
            settings.useWideViewPort = true // ÈÄÇÈÖçÂ±èÂπïÔºåÈÅøÂÖçÂä†ËΩΩÂêéÊ†∑ÂºèÈóÆÈ¢òÈó¥Êé•ÂØºËá¥Ë∂ÖÊó∂
            settings.loadWithOverviewMode = true

            // ‰ºòÂÖà‰ΩøÁî®ÁºìÂ≠òÔºåÊó†ÁºìÂ≠òÊó∂ÂÜçËØ∑Ê±ÇÁΩëÁªú
            settings.cacheMode = WebSettings.LOAD_CACHE_ELSE_NETWORK
            // ÂêØÁî® HTML5 ÁºìÂ≠òÔºàÂ¶Ç localStorage„ÄÅIndexedDBÔºâ
            settings.domStorageEnabled = true
            settings.databaseEnabled = true
            // 1. ÊîØÊåÅ TLS 1.0~1.3ÔºàÈÄÇÈÖç‰ΩéÁâàÊú¨ AndroidÔºâ
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW // ÂÖÅËÆ∏Ê∑∑ÂêàÂÜÖÂÆπÔºàHTTPS Âä†ËΩΩ HTTP ËµÑÊ∫êÔºâ
                webViewClient = object : WebViewClient() {
                    // Ëß£ÂÜ≥ TLS ÂçèËÆÆÊîØÊåÅÈóÆÈ¢ò
                    override fun onReceivedSslError(
                        view: WebView?,
                        handler: SslErrorHandler?,
                        error: SslError?
                    ) {
                        // Ê≥®ÊÑèÔºö‰ªÖË∞ÉËØïÊó∂‰ΩøÁî®ÔºÅÊ≠£ÂºèÁéØÂ¢ÉÈúÄÈ™åËØÅËØÅ‰π¶ÔºåÈÅøÂÖçÂÆâÂÖ®È£éÈô©
                        handler?.proceed() // ÂøΩÁï• SSL ËØÅ‰π¶ÈîôËØØÔºà‰∏¥Êó∂ÊéíÊü•Áî®Ôºâ
                    }

                    // ÊçïËé∑Âä†ËΩΩÈîôËØØÔºåÊâìÂç∞Êó•ÂøóÂÆö‰ΩçÈóÆÈ¢ò
                    override fun onReceivedError(
                        view: WebView?,
                        request: WebResourceRequest?,
                        error: WebResourceError?
                    ) {
                        super.onReceivedError(view, request, error)
                        // ÊâìÂç∞ÈîôËØØ‰ø°ÊÅØÔºàÂú® Logcat ‰∏≠ÊêúÁ¥¢ "WebViewError"Ôºâ
                        Log.e("WebViewError", "ÈîôËØØÁ†ÅÔºö${error?.errorCode}ÔºåÊèèËø∞Ôºö${error?.description}")
                        when (error?.errorCode) {
                            -8 -> { // ERR_CONNECTION_TIMED_OUT
                                Toast.makeText(context, "ËøûÊé•Ë∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÊàñÁ®çÂêéÈáçËØï", Toast.LENGTH_SHORT).show()
                            }
                            -2 -> { // Êó†ÁΩëÁªú
                                Toast.makeText(context, "ÁΩëÁªú‰∏çÂèØÁî®", Toast.LENGTH_SHORT).show()
                            }
                            else -> {
                                Toast.makeText(context, "Âä†ËΩΩÂ§±Ë¥•Ôºö${error?.description}", Toast.LENGTH_SHORT).show()
                            }
                        }
                    }
                }
            }
        }




        var url = ""
        when (type) {
            CommonEnum.LoadHtmlType.NEED_SPLICED_PARA -> {
                url =
                    WearUtil.APP_SERVER_HTTPS_HTML + htmlUrl + WearData.getInstance().token + "/?device=" + AppConstant.device
            }

            CommonEnum.LoadHtmlType.NOT_NEED_SPLICED_PARA -> {
                url = WearUtil.APP_SERVER_HTTPS_HTML + htmlUrl
            }

            CommonEnum.LoadHtmlType.DIRECT_LINK -> {
                url = htmlUrl
            }
        }

        LogUtils.e("ceshi  urlÊòØ‰ªÄ‰πà=================Ôºö", url)
        mWebView?.loadUrl(url)
        if(url == "https://dash.proxy302.com/webapp/user-center"){
            lifecycleScope.launch {
                delay(2000)
                personalCenter = true
            }
            lifecycleScope.launch {
                delay(2000)
                Log.e("ceshi","personalCenter>>>$personalCenter")
            }
        }
        //mWebView?.callHandler(CommonHtmlUtil.handlerName, url, null)
        //mWebView?.callHandler(CommonHtmlUtil.handlerNamePara, url, null)
        mWebView?.registerHandler(CommonHtmlUtil.handlerNamePara, object : BridgeHandler {
            override fun handler(data: String?, function: CallBackFunction?) {
                Log.e("ÊµãËØï","ffffffffffff")
                LogUtils.e("ceshi ÊòØÂê¶ÊúâÊï∞ÊçÆËøáÊù•============:", data.toString())

                showHtmlAnalysisData(data)
            }
        })


    }

    /**
     * Êï∞ÊçÆÂ§ÑÁêÜ
     */
    fun showHtmlAnalysisData(jsonStr: String?) {
        var chargeId = 0
        if (jsonStr != null) {
            val jsonObj = JSONObject(jsonStr)

            val type = jsonObj.optString(CommonHtmlUtil.htmlType)
            val data = jsonObj.optString(CommonHtmlUtil.htmlData)
            LogUtils.e("ceshi Ëß£ÊûêÁöÑÊï∞ÊçÆÊòØ‰ªÄ‰πà==============Ôºö", type)

            when (type) {
                CommonHtmlUtil.chargeHtml -> {

                    mPayDetailDialog = PayDetailsDialog(this@SettingActivity, mQuickAccessBean)
                    mPayDetailDialog?.show()




                    val chargeJsonBean = Gson().fromJson(data, HtmlChargeJsonBean::class.java)
                    if (chargeJsonBean != null) {
                        LogUtils.e(
                            "ceshi ËæìÂá∫ÁöÑÊï∞ÊçÆÁ±ªÂûãÊòØ‰ªÄ‰πà===========Ôºö",
                            chargeJsonBean.note,
                            chargeJsonBean.id
                        )
                        chargeId = chargeJsonBean.id
                        mPayDetailDialog?.setOnButtonClickListener(object : PayDetailsDialog.OnButtonClickListener {
                            override fun onButtonClick(buttonText: String) {
                                Log.e("ceshi","onButtonClick$buttonText")
                                when (buttonText) {
                                    "aliPay" -> {
                                        ToastUtils.showLong(resources.getString(R.string.toast_loading))
                                        MainModel.getAliPayUrl(chargeId, object : LoginCallback {
                                            override fun onSuccess(responseBody: String?) {
                                                val gson = Gson()
                                                Log.e("ceshi","ali+++++${responseBody}")
                                                val response = gson.fromJson(responseBody, ResponseAliData::class.java)
                                                Log.e("ceshi","ali+++++${response.data.to}")
                                                runOnUiThread {
                                                    //loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.to)
                                                    val intent = Intent(Intent.ACTION_VIEW)
                                                    intent.setData(Uri.parse(response.data.to))
                                                    ActivityUtils.startActivity(intent)
                                                }

                                            }

                                            override fun onFailure(errorCode: Int, errorMessage: String?) {
                                                Log.e("ceshi","ali----")
                                            }

                                        })


                                    }
                                    "usdtPay" -> {
                                        ToastUtils.showLong(resources.getString(R.string.toast_loading))
                                        MainModel.getUstdurl(chargeId, object : LoginCallback {
                                            override fun onSuccess(responseBody: String?) {
                                                val gson = Gson()
                                                Log.e("ceshi","ali+++++${responseBody}")
                                                val response = gson.fromJson(responseBody, ResponseUsdtData::class.java)
                                                Log.e("ceshi","ali+++++${response.data.url}")
                                                runOnUiThread {
                                                    loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.url,mWebView!!)
                                                    //mPayDetailDialog?.setUrlListener(response.data.url)
                                                    Log.e("ceshi","++url${response.data.url}")
                                                    //mBinding?.incMain?.webViewPay?.evaluateJavascript("document.body.innerHTML = \"\";", null)

                                                    /*mBinding?.incMain?.webViewPay?.loadUrl(response.data.url)
                                                    lifecycleScope.launch(Dispatchers.Main) {
                                                        // Âª∂Ëøü1ÁßíÔºà1000ÊØ´ÁßíÔºâ
                                                        delay(1300)
                                                        mBinding?.incMain?.webView?.visibility = View.GONE
                                                        mBinding?.incMain?.webViewPay?.visibility = View.VISIBLE
                                                    }*/
                                                }
                                                isUSDT = true

                                            }

                                            override fun onFailure(errorCode: Int, errorMessage: String?) {
                                                Log.e("ceshi","ali----")
                                            }

                                        })
                                    }
                                    "stripePay" -> {
                                        ToastUtils.showLong(resources.getString(R.string.toast_loading))
                                        payType = "stripePay"
                                        MainModel.getStripeKey(chargeId, object : LoginCallback{
                                            override fun onSuccess(responseBody: String?) {
                                                Log.e("ceshi","stripe++++")
                                                val gson = Gson()
                                                Log.e("ceshi","ali+++++${responseBody}")
                                                val response = gson.fromJson(responseBody, ResponseStripeData::class.java)
                                                var publishableKey = ""
                                                publishableKey = response.data.jk+response.data.hk+response.data.pk+response.data.a
                                                Log.e("ceshi","ali+++++${publishableKey}")
                                                //sendDataToJavaScript(publishableKey)
                                                var url = "https://dash.proxy302.com/stripe?pk=$publishableKey&sid=${response.data.session_id}"
                                                Log.e("ceshi","url++++${url}")

                                                runOnUiThread {
                                                    loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,url,mWebView!!)
                                                    //mPayDetailDialog?.setUrlListener(url)
                                                    Log.e("ceshi","--url${url}")
                                                    //loadWebHandler1(url)
                                                }
                                            }

                                            override fun onFailure(errorCode: Int, errorMessage: String?) {
                                                Log.e("ceshi","stripe----")
                                            }

                                        })
                                    }
                                }
                            }

                        })

                    }
                }

                CommonHtmlUtil.payBillHtml -> {
                    //HtmlManager.jumpHtml(this@HomeActivity, data)
                    loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,data,mWebView!!)
                }
            }
        }
    }


    /*private fun applyLanguage() {
        val language = LanguageUtil.getSavedLanguage(this)
        Log.e("ceshi","Ëé∑ÂèñÁöÑËØ≠Ë®ÄÊòØ:$language")
        val context = LanguageUtil.applyLanguage(this, language)
        val resources = context.resources
        val configuration = resources.configuration
        val displayMetrics = resources.displayMetrics
        // Êõ¥Êñ∞ÈÖçÁΩÆ
        resources.updateConfiguration(configuration, displayMetrics)

    }*/
    private fun applyLanguage() {
        val language = LanguageUtil.getSavedLanguage(this)
        Log.e("ceshi","Ëé∑ÂèñÁöÑËØ≠Ë®ÄÊòØ:$language")

        // 1. Ëé∑ÂèñÊñ∞ÁöÑ‰∏ä‰∏ãÊñáÔºàÂ∑≤Â∫îÁî®ËØ≠Ë®ÄËÆæÁΩÆÔºâ
        val newContext = LanguageUtil.applyLanguage(this, language)

        // 2. ÈáçÂêØÂΩìÂâçActivityÔºå‰ΩøÊñ∞‰∏ä‰∏ãÊñáÁîüÊïà
        val intent = intent // Ëé∑ÂèñÂΩìÂâçActivityÁöÑÂêØÂä®ÊÑèÂõæ
        finish() // ÈîÄÊØÅÂΩìÂâçActivity
        startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)) // ÈáçÂª∫Activity
        overridePendingTransition(0, 0) // ÂèØÈÄâÔºöÂéªÈô§ÂàáÊç¢Âä®Áîª
    }

    // ËØ≠Ë®ÄÂàáÊç¢ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
    fun onLanguageChange() {
        // ‰æãÂ¶ÇÂàáÊç¢Âà∞‰∏≠Êñá
        LanguageUtil.changeLanguage(this, LanguageUtil.LANGUAGE_ZH)
    }

    private fun insertUserConfiguration(){
        //MyApplication.isFirstLaunch = MyApplication.sharedPreferences.getBoolean("isFirstLaunch", true)
        lifecycleScope.launch(Dispatchers.IO) {
            //val readAppEmojisData = dataStoreManager.readAppEmojisData.first()?:"\uD83D\uDE00"
            val readImageUrl = dataStoreManager.readImageUrl.first()?:""
            val readBuildTitleModelType = dataStoreManager.readBuildTitleModelType.first()?:"gpt-4o"
            val readModelType = dataStoreManager.readModelType.first()?:"gemini-2.5-flash-nothink"
            val readUserEmailData = dataStoreManager.readUserEmailData.first()?:""
            val systemLanguage = LanguageUtil.getSavedLanguage(this@SettingActivity)
            val systemTheme = SystemUtils.getSystemTheme(this@SettingActivity)
            val readSlideBottomSwitch = dataStoreManager.readSlideBottomSwitch.first()?:false
            val readUseTracelessSwitch = dataStoreManager.readUseTracelessSwitch.first()?:false
            var modelList = dataStoreManager.modelListFlow.first()
            val readSearchServiceType = dataStoreManager.readSearchServiceType.first()?:"search1api"
            val readBuildTitleTime = dataStoreManager.readBuildTitleTime.first()?:"Á¨¨‰∏ÄÊ¨°ÂØπËØù"

            chatDatabase.chatDao().insertUserConfig(UserConfigurationRoom(0,readUserEmailData,systemLanguage,"light",readUseTracelessSwitch,
                readSlideBottomSwitch,readImageUrl,readSearchServiceType,readModelType,readBuildTitleModelType,modelList,readBuildTitleTime))
            //dataStoreManager.saveAppEmojisData("\uD83D\uDE00")
            dataStoreManager.saveImageUrl("")
            dataStoreManager.saveBuildTitleModeTypeData("gpt-4o")
            dataStoreManager.saveModelType("gemini-2.5-flash-nothink")
            //dataStoreManager.saveModelList(modelListNull)
            dataStoreManager.saveSearchServiceTypeData("search1api")
            dataStoreManager.saveSlideBottomSwitch(false)
            dataStoreManager.saveUseTracelessSwitch(false)
            dataStoreManager.saveBuildTitleTimeData("Á¨¨‰∏ÄÊ¨°ÂØπËØù")
            dataStoreManager.saveUserEmail("")
        }



    }


    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    @SuppressLint("MissingInflatedId")
    fun showBottomPayDialog(context: Context) {
        var isSelectPay5 = false
        var isSelectPay20 = false
        var isSelectPay50 = false
        var isSelectPay100 = false
        var isSelectPay220 = false
        var isSelect = false
        var payId = 0
        // ‰ΩøÁî® requireContext() Ëé∑ÂèñÊ≠£Á°ÆÁöÑ Context
        val bottomSheetDialog = BottomSheetDialog(context)

        // ‰∏∫ BottomSheetDialog ËÆæÁΩÆÂ∏ÉÂ±Ä
        val view: View =  LayoutInflater.from(context).inflate(R.layout.bottom_sheet_pay_layout, null)
        bottomSheetDialog.setContentView(view)

        // Ëé∑ÂèñBottomSheetBehavior
        val bottomSheet = bottomSheetDialog.findViewById<View>(com.google.android.material.R.id.design_bottom_sheet)
        val behavior = BottomSheetBehavior.from(bottomSheet!!)

        // ËÆæÁΩÆ‰∏∫Â±ïÂºÄÁä∂ÊÄÅ
        behavior.state = BottomSheetBehavior.STATE_EXPANDED

        // ËÆæÁΩÆÊúÄÂ§ßÈ´òÂ∫¶ÔºàÂèØÈÄâÔºåÊ†πÊçÆÈúÄË¶ÅË∞ÉÊï¥Ôºâ
        behavior.peekHeight = Resources.getSystem().displayMetrics.heightPixels

        // Ëé∑ÂèñÂ∏ÉÂ±Ä‰∏≠ÁöÑ ButtonÔºåÂπ∂ËÆæÁΩÆÁÇπÂáª‰∫ã‰ª∂
        val payConst5 = view.findViewById<ConstraintLayout>(R.id.payConst5)
        val payConst20 = view.findViewById<ConstraintLayout>(R.id.payConst20)
        val payConst50 = view.findViewById<ConstraintLayout>(R.id.payConst50)
        val payConst100 = view.findViewById<ConstraintLayout>(R.id.payConst100)
        val payConst220 = view.findViewById<ConstraintLayout>(R.id.payConst220)
        val payDialogBackLine = view.findViewById<LinearLayout>(R.id.payDialogBackLine)

        val nextLine = view.findViewById<LinearLayout>(R.id.nextLine)

        val payProtocol = view.findViewById<TextView>(R.id.payProtocol)

        val paySelectImage5 = view.findViewById<ImageView>(R.id.paySelectImage5)
        val paySelectImage20 = view.findViewById<ImageView>(R.id.paySelectImage20)
        val paySelectImage50 = view.findViewById<ImageView>(R.id.paySelectImage50)
        val paySelectImage100 = view.findViewById<ImageView>(R.id.paySelectImage100)
        val paySelectImage220 = view.findViewById<ImageView>(R.id.paySelectImage220)

        val payTv5 = view.findViewById<TextView>(R.id.payTv5)
        val pay1Tv5 = view.findViewById<TextView>(R.id.pay1Tv5)
        val payTv20 = view.findViewById<TextView>(R.id.payTv20)
        val pay1Tv20 = view.findViewById<TextView>(R.id.pay1Tv20)
        val payTv50 = view.findViewById<TextView>(R.id.payTv50)
        val pay1Tv50 = view.findViewById<TextView>(R.id.pay1Tv50)
        val payTv100 = view.findViewById<TextView>(R.id.payTv100)
        val pay1Tv100 = view.findViewById<TextView>(R.id.pay1Tv100)
        val payTv220 = view.findViewById<TextView>(R.id.payTv220)
        val pay1Tv220 = view.findViewById<TextView>(R.id.pay1Tv220)

        payDialogBackLine.setOnClickListener {
            bottomSheetDialog.dismiss()
        }

        bottomSheetDialog.setOnDismissListener {
            lifecycleScope.launch(Dispatchers.IO) {
                chatViewModel.getUserInfo( WearData.getInstance().token,apiService)
            }
        }

        payConst5.setOnClickListener {
            if (!isSelectPay5){
                isSelectPay5 = true
                payId = 27
                payConst5.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_selected_line)
                paySelectImage5.visibility = View.VISIBLE
                payTv5.setTextColor(ContextCompat.getColor(context, R.color.color302AI))
                pay1Tv5.setTextColor(ContextCompat.getColor(context, R.color.color302AI))

                isSelectPay20 = false
                payConst20.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage20.visibility = View.GONE
                payTv20.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv20.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay50 = false
                payConst50.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage50.visibility = View.GONE
                payTv50.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv50.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay100 = false
                payConst100.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage100.visibility = View.GONE
                payTv100.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv100.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay220 = false
                payConst220.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage220.visibility = View.GONE
                payTv220.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv220.setTextColor(ContextCompat.getColor(context, R.color.black))


            }else{
                isSelectPay5 = false
                payId = 0
                payConst5.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage5.visibility = View.GONE
                payTv5.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv5.setTextColor(ContextCompat.getColor(context, R.color.black))
            }
        }

        payConst20.setOnClickListener {
            if (!isSelectPay20){
                isSelectPay20 = true
                payId = 28
                payConst20.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_selected_line)
                paySelectImage20.visibility = View.VISIBLE
                payTv20.setTextColor(ContextCompat.getColor(context, R.color.color302AI))
                pay1Tv20.setTextColor(ContextCompat.getColor(context, R.color.color302AI))

                isSelectPay5 = false
                payConst5.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage5.visibility = View.GONE
                payTv5.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv5.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay50 = false
                payConst50.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage50.visibility = View.GONE
                payTv50.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv50.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay100 = false
                payConst100.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage100.visibility = View.GONE
                payTv100.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv100.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay220 = false
                payConst220.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage220.visibility = View.GONE
                payTv220.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv220.setTextColor(ContextCompat.getColor(context, R.color.black))

            }else{
                isSelectPay20 = false
                payId = 0
                payConst20.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage20.visibility = View.GONE
                payTv20.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv20.setTextColor(ContextCompat.getColor(context, R.color.black))
            }
        }

        payConst50.setOnClickListener {
            if (!isSelectPay50){
                isSelectPay50 = true
                payId = 29
                payConst50.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_selected_line)
                paySelectImage50.visibility = View.VISIBLE
                payTv50.setTextColor(ContextCompat.getColor(context, R.color.color302AI))
                pay1Tv50.setTextColor(ContextCompat.getColor(context, R.color.color302AI))

                isSelectPay5 = false
                payConst5.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage5.visibility = View.GONE
                payTv5.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv5.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay20 = false
                payConst20.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage20.visibility = View.GONE
                payTv20.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv20.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay100 = false
                payConst100.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage100.visibility = View.GONE
                payTv100.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv100.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay220 = false
                payConst220.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage220.visibility = View.GONE
                payTv220.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv220.setTextColor(ContextCompat.getColor(context, R.color.black))
            }else{
                isSelectPay50 = false
                payId = 0
                payConst50.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage50.visibility = View.GONE
                payTv50.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv50.setTextColor(ContextCompat.getColor(context, R.color.black))
            }
        }

        payConst100.setOnClickListener {
            if (!isSelectPay100){
                isSelectPay100 = true
                payId = 30
                payConst100.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_selected_line)
                paySelectImage100.visibility = View.VISIBLE
                payTv100.setTextColor(ContextCompat.getColor(context, R.color.color302AI))
                pay1Tv100.setTextColor(ContextCompat.getColor(context, R.color.color302AI))

                isSelectPay50 = true
                payConst50.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_selected_line)
                paySelectImage50.visibility = View.VISIBLE
                payTv50.setTextColor(ContextCompat.getColor(context, R.color.color302AI))
                pay1Tv50.setTextColor(ContextCompat.getColor(context, R.color.color302AI))

                isSelectPay5 = false
                payConst5.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage5.visibility = View.GONE
                payTv5.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv5.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay20 = false
                payConst20.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage20.visibility = View.GONE
                payTv20.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv20.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay50 = false
                payConst50.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage50.visibility = View.GONE
                payTv50.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv50.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay220 = false
                payConst220.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage220.visibility = View.GONE
                payTv220.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv220.setTextColor(ContextCompat.getColor(context, R.color.black))
            }else{
                isSelectPay100 = false
                payId = 0
                payConst100.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage100.visibility = View.GONE
                payTv100.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv100.setTextColor(ContextCompat.getColor(context, R.color.black))
            }
        }

        payConst220.setOnClickListener {
            if (!isSelectPay220){
                isSelectPay220 = true
                payId = 31
                payConst220.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_selected_line)
                paySelectImage220.visibility = View.VISIBLE
                payTv220.setTextColor(ContextCompat.getColor(context, R.color.color302AI))
                pay1Tv220.setTextColor(ContextCompat.getColor(context, R.color.color302AI))

                isSelectPay50 = true
                payConst50.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_selected_line)
                paySelectImage50.visibility = View.VISIBLE
                payTv50.setTextColor(ContextCompat.getColor(context, R.color.color302AI))
                pay1Tv50.setTextColor(ContextCompat.getColor(context, R.color.color302AI))

                isSelectPay5 = false
                payConst5.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage5.visibility = View.GONE
                payTv5.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv5.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay20 = false
                payConst20.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage20.visibility = View.GONE
                payTv20.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv20.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay50 = false
                payConst50.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage50.visibility = View.GONE
                payTv50.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv50.setTextColor(ContextCompat.getColor(context, R.color.black))

                isSelectPay100 = false
                payConst100.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage100.visibility = View.GONE
                payTv100.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv100.setTextColor(ContextCompat.getColor(context, R.color.black))
            }else{
                isSelectPay220 = false
                payId = 0
                payConst220.setBackgroundResource(R.drawable.shape_select_site_bg_write_pay_line)
                paySelectImage220.visibility = View.GONE
                payTv220.setTextColor(ContextCompat.getColor(context, R.color.black))
                pay1Tv220.setTextColor(ContextCompat.getColor(context, R.color.black))
            }
        }

        payProtocol.setOnClickListener {
            showBottomPayProtocolDialog(context)
        }
        nextLine.setOnClickListener {
            if (payId == 0){
                Toast.makeText(context, ContextCompat.getString(this@SettingActivity, R.string.pay_text_pay_toast_message), Toast.LENGTH_SHORT).show()
            }else{
                showBottomPayWayDialog(context,payId)
            }

        }


        // ÊòæÁ§∫ BottomSheetDialog
        bottomSheetDialog.show()
    }

    @SuppressLint("MissingInflatedId")
    private fun showBottomPayWayDialog(context: Context, payId:Int){
        var isAiliPay = false
        var isUsdtPay = false
        var isStripePay = false
        var payWay = ""
        // ‰ΩøÁî® requireContext() Ëé∑ÂèñÊ≠£Á°ÆÁöÑ Context
        val bottomSheetDialog = BottomSheetDialog(context)

        // ‰∏∫ BottomSheetDialog ËÆæÁΩÆÂ∏ÉÂ±Ä
        val view: View =  LayoutInflater.from(context).inflate(R.layout.bottom_sheet_pay_way_layout, null)
        bottomSheetDialog.setContentView(view)

        // Ëé∑ÂèñBottomSheetBehavior
        val bottomSheet = bottomSheetDialog.findViewById<View>(com.google.android.material.R.id.design_bottom_sheet)
        val behavior = BottomSheetBehavior.from(bottomSheet!!)

        // ËÆæÁΩÆ‰∏∫Â±ïÂºÄÁä∂ÊÄÅ
        behavior.state = BottomSheetBehavior.STATE_EXPANDED

        // ËÆæÁΩÆÊúÄÂ§ßÈ´òÂ∫¶ÔºàÂèØÈÄâÔºåÊ†πÊçÆÈúÄË¶ÅË∞ÉÊï¥Ôºâ
        behavior.peekHeight = Resources.getSystem().displayMetrics.heightPixels

        val payWayProtocol = view.findViewById<TextView>(R.id.payWayProtocol)
        val payDialogWayBackLine = view.findViewById<LinearLayout>(R.id.payDialogWayBackLine)
        val payBalanceTv = view.findViewById<TextView>(R.id.payBalanceTv)

        val ailiPaySelectImage = view.findViewById<ImageView>(R.id.ailiPaySelectImage)
        val ailiPaySelectedImage = view.findViewById<ImageView>(R.id.ailiPaySelectedImage)

        val payCardSelectImage = view.findViewById<ImageView>(R.id.payCardSelectImage)
        val payCardSelectedImage = view.findViewById<ImageView>(R.id.payCardSelectedImage)

        val usdtSelectImage = view.findViewById<ImageView>(R.id.usdtSelectImage)
        val usdtSelectedImage = view.findViewById<ImageView>(R.id.usdtSelectedImage)

        val ailiPayCons = view.findViewById<ConstraintLayout>(R.id.ailiPayCons)
        val stripePayCons = view.findViewById<ConstraintLayout>(R.id.stripePayCons)
        val usdtPayCons = view.findViewById<ConstraintLayout>(R.id.usdtPayCons)

        val payWayConst = view.findViewById<ConstraintLayout>(R.id.payWayConst)
        val payWeb = view.findViewById<BridgeWebView>(R.id.payWeb)

        val payLine = view.findViewById<LinearLayout>(R.id.payLine)


        var payBalance = 5.00
        when(payId){
            27 -> {
                payBalance = 5.00
            }
            28 -> {
                payBalance = 20.00
            }
            29 -> {
                payBalance = 50.00
            }
            30 -> {
                payBalance = 100.00
            }
            31 -> {
                payBalance = 200.00
            }

        }

        payBalanceTv.text = "\$ ${payBalance.toString()}"


        payWayProtocol.setOnClickListener {
            showBottomPayProtocolDialog(context)
        }

        payDialogWayBackLine.setOnClickListener {
            bottomSheetDialog.dismiss()
        }

        ailiPayCons.setOnClickListener {
            ViewAnimationUtils.performClickEffect(it)
            if (!isAiliPay){
                isAiliPay = true
                isStripePay = false
                isUsdtPay = false
                payWay = "ailiPay"
                ailiPaySelectImage.visibility = View.GONE
                ailiPaySelectedImage.visibility = View.VISIBLE

                payCardSelectImage.visibility = View.VISIBLE
                payCardSelectedImage.visibility = View.GONE

                usdtSelectImage.visibility = View.VISIBLE
                usdtSelectedImage.visibility = View.GONE
            }else{
                isAiliPay = false
                payWay = ""
                ailiPaySelectImage.visibility = View.VISIBLE
                ailiPaySelectedImage.visibility = View.GONE
            }
        }

        stripePayCons.setOnClickListener {
            ViewAnimationUtils.performClickEffect(it)
            if (!isStripePay){
                isStripePay = true
                isAiliPay = false
                isUsdtPay = false
                payWay = "stripePay"
                payCardSelectImage.visibility = View.GONE
                payCardSelectedImage.visibility = View.VISIBLE

                ailiPaySelectImage.visibility = View.VISIBLE
                ailiPaySelectedImage.visibility = View.GONE

                usdtSelectImage.visibility = View.VISIBLE
                usdtSelectedImage.visibility = View.GONE
            }else{
                isStripePay = false
                payWay = ""
                payCardSelectImage.visibility = View.VISIBLE
                payCardSelectedImage.visibility = View.GONE
            }
        }

        usdtPayCons.setOnClickListener {
            ViewAnimationUtils.performClickEffect(it)
            if (!isUsdtPay){
                isUsdtPay = true
                isAiliPay = false
                isStripePay = false
                payWay = "usdtPay"
                usdtSelectImage.visibility = View.GONE
                usdtSelectedImage.visibility = View.VISIBLE

                payCardSelectImage.visibility = View.VISIBLE
                payCardSelectedImage.visibility = View.GONE

                ailiPaySelectImage.visibility = View.VISIBLE
                ailiPaySelectedImage.visibility = View.GONE
            }else{
                isUsdtPay = false
                payWay = ""
                usdtSelectImage.visibility = View.VISIBLE
                usdtSelectedImage.visibility = View.GONE
            }

        }

        payLine.setOnClickListener {
            ViewAnimationUtils.performClickEffect(it)
            when(payWay){
                "" -> {
                    Toast.makeText(context, ContextCompat.getString(this@SettingActivity, R.string.pay_text_pay_way_toast_message), Toast.LENGTH_SHORT).show()
                }
                "ailiPay" -> {
                    payWeb.visibility = View.VISIBLE
                    payWayConst.visibility = View.GONE
                    ToastUtils.showLong(resources.getString(R.string.toast_loading))
                    MainModel.getAliPayUrl(payId, object : LoginCallback {
                        override fun onSuccess(responseBody: String?) {
                            val gson = Gson()
                            Log.e("ceshi","ali+++++${responseBody}")
                            val response = gson.fromJson(responseBody, ResponseAliData::class.java)
                            Log.e("ceshi","ali+++++${response.data.to}")
                            runOnUiThread {
                                loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.to,payWeb)
                                val intent = Intent(Intent.ACTION_VIEW)
                                intent.setData(Uri.parse(response.data.to))
                                ActivityUtils.startActivity(intent)
                            }

                        }

                        override fun onFailure(errorCode: Int, errorMessage: String?) {
                            Log.e("ceshi","ali----")
                        }

                    })
                }
                "stripePay" -> {
                    ToastUtils.showLong(resources.getString(R.string.toast_loading))
                    payWeb.visibility = View.VISIBLE
                    payWayConst.visibility = View.GONE
                    payType = "stripePay"
                    MainModel.getStripeKey(payId, object : LoginCallback {
                        override fun onSuccess(responseBody: String?) {
                            Log.e("ceshi","stripe++++")
                            val gson = Gson()
                            Log.e("ceshi","ali+++++${responseBody}")
                            val response = gson.fromJson(responseBody, ResponseStripeData::class.java)
                            var publishableKey = ""
                            publishableKey = response.data.jk+response.data.hk+response.data.pk+response.data.a
                            Log.e("ceshi","ali+++++${publishableKey}")
                            //sendDataToJavaScript(publishableKey)
                            var url = "https://dash.proxy302.com/stripe?pk=$publishableKey&sid=${response.data.session_id}"
                            Log.e("ceshi","url++++${url}")

                            runOnUiThread {
                                loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,url,payWeb)
                                //mPayDetailDialog?.setUrlListener(url)
                                Log.e("ceshi","--url${url}")
                                //loadWebHandler1(url)
                            }
                        }

                        override fun onFailure(errorCode: Int, errorMessage: String?) {
                            Log.e("ceshi","stripe----")
                        }

                    })
                }
                "usdtPay" -> {
                    ToastUtils.showLong(resources.getString(R.string.toast_loading))
                    payWeb.visibility = View.VISIBLE
                    payWayConst.visibility = View.GONE
                    MainModel.getUstdurl(payId, object : LoginCallback {
                        override fun onSuccess(responseBody: String?) {
                            val gson = Gson()
                            Log.e("ceshi","ali+++++${responseBody}")
                            val response = gson.fromJson(responseBody, ResponseUsdtData::class.java)
                            Log.e("ceshi","ali+++++${response.data.url}")
                            runOnUiThread {
                                loadWebHandler(CommonEnum.LoadHtmlType.DIRECT_LINK,response.data.url,payWeb)
                                //mPayDetailDialog?.setUrlListener(response.data.url)
                                Log.e("ceshi","++url${response.data.url}")
                                //mBinding?.incMain?.webViewPay?.evaluateJavascript("document.body.innerHTML = \"\";", null)

                                /*mBinding?.incMain?.webViewPay?.loadUrl(response.data.url)
                                lifecycleScope.launch(Dispatchers.Main) {
                                    // Âª∂Ëøü1ÁßíÔºà1000ÊØ´ÁßíÔºâ
                                    delay(1300)
                                    mBinding?.incMain?.webView?.visibility = View.GONE
                                    mBinding?.incMain?.webViewPay?.visibility = View.VISIBLE
                                }*/
                            }
                            isUSDT = true

                        }

                        override fun onFailure(errorCode: Int, errorMessage: String?) {
                            Log.e("ceshi","ali----")
                        }

                    })
                }
            }
        }



        // ÊòæÁ§∫ BottomSheetDialog
        bottomSheetDialog.show()
    }

    private fun showBottomPayProtocolDialog(context: Context){
        // ‰ΩøÁî® requireContext() Ëé∑ÂèñÊ≠£Á°ÆÁöÑ Context
        val bottomSheetDialog = BottomSheetDialog(context)

        // ‰∏∫ BottomSheetDialog ËÆæÁΩÆÂ∏ÉÂ±Ä
        val view: View =  LayoutInflater.from(context).inflate(R.layout.bottom_sheet_pay_some_layout, null)
        bottomSheetDialog.setContentView(view)

        // Ëé∑ÂèñBottomSheetBehavior
        val bottomSheet = bottomSheetDialog.findViewById<View>(com.google.android.material.R.id.design_bottom_sheet)
        val behavior = BottomSheetBehavior.from(bottomSheet!!)

        val payProtocolWeb = view.findViewById<WebView>(R.id.payProtocolWeb)

        val payDialogSomeBackLine = view.findViewById<LinearLayout>(R.id.payDialogSomeBackLine)
        when (defaultSystemLanguage) {
            LanguageUtil.LANGUAGE_ZH -> payProtocolWeb.loadDataWithBaseURL(null, payProtocolUrl, "text/html", "utf-8", null)
            LanguageUtil.LANGUAGE_JA -> payProtocolWeb.loadDataWithBaseURL(null, payProtocolUrlJa, "text/html", "utf-8", null)
            else -> payProtocolWeb.loadDataWithBaseURL(null, payProtocolUrlEn, "text/html", "utf-8", null)
        }


        payDialogSomeBackLine.setOnClickListener {
            bottomSheetDialog.dismiss()
        }

        // ËÆæÁΩÆ‰∏∫Â±ïÂºÄÁä∂ÊÄÅ
        behavior.state = BottomSheetBehavior.STATE_EXPANDED

        // ËÆæÁΩÆÊúÄÂ§ßÈ´òÂ∫¶ÔºàÂèØÈÄâÔºåÊ†πÊçÆÈúÄË¶ÅË∞ÉÊï¥Ôºâ
        behavior.peekHeight = Resources.getSystem().displayMetrics.heightPixels

        // ÊòæÁ§∫ BottomSheetDialog
        bottomSheetDialog.show()
    }
    val payProtocolUrl = "<!DOCTYPE html>\n" +
            "<html lang=\"zh-CN\">\n" +
            "<head>\n" +
            "    <meta charset=\"UTF-8\">\n" +
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n" +
            "    <title>Áî®Êà∑ÂÖÖÂÄºÂçèËÆÆ</title>\n" +
            "    <style>\n" +
            "        body {\n" +
            "            font-family: \"Microsoft Yahei\", sans-serif;\n" +
            "            line-height: 1.6;\n" +
            "            margin: 20px;\n" +
            "            color: #333;\n" +
            "        }\n" +
            "        .container {\n" +
            "            max-width: 800px;\n" +
            "            margin: 0 auto;\n" +
            "            background-color: #fff;\n" +
            "            padding: 20px;\n" +
            "            border: 1px solid #ddd;\n" +
            "            border-radius: 5px;\n" +
            "            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n" +
            "        }\n" +
            "        h1 {\n" +
            "            text-align: center;\n" +
            "            color: #333;\n" +
            "        }\n" +
            "        h2 {\n" +
            "            color: #333;\n" +
            "            margin-top: 20px;\n" +
            "            padding-bottom: 5px;\n" +
            "            border-bottom: 1px solid #eee;\n" +
            "        }\n" +
            "        p {\n" +
            "            margin: 10px 0;\n" +
            "        }\n" +
            "        ul {\n" +
            "            margin: 10px 0;\n" +
            "            padding-left: 20px;\n" +
            "        }\n" +
            "        li {\n" +
            "            margin: 5px 0;\n" +
            "        }\n" +
            "        .highlight {\n" +
            "            font-weight: bold;\n" +
            "        }\n" +
            "    </style>\n" +
            "</head>\n" +
            "<body>\n" +
            "    <div class=\"container\">\n" +
            "        <h1>„ÄäÁî®Êà∑ÂÖÖÂÄºÂçèËÆÆ„Äã</h1>\n" +
            "        <p>Â∞äÊï¨ÁöÑÁî®Êà∑ÊÇ®Â•ΩÔºåÂú®ÂêåÊÑèÊú¨ÂçèËÆÆÂâçÔºåËØ∑ÊÇ®ËÆ§ÁúüÈòÖËØªÂπ∂ÂÖÖÂàÜÁü•ÊÇâ„ÄÅÁêÜËß£302.AIÁöÑÂêÑÈ°πËßÑÂàôÂèäË¶ÅÊ±ÇÔºå‰ª•ÂèäÂõΩÂÆ∂ÂÖ≥‰∫éËØ•Á±ª‰∫íËÅîÁΩë‰ø°ÊÅØÊúçÂä°ÁöÑÊ≥ïÂæãÊ≥ïËßÑÁ≠â„ÄÇÂ¶ÇÊûúÊÇ®ÂØπÊú¨ÂçèËÆÆÁöÑ‰ªª‰ΩïÊù°Ê¨æË°®Á§∫ÂºÇËÆÆÔºåÊÇ®ÂèØ‰ª•ÈÄâÊã©‰∏ç‰ΩøÁî®Ôºõ‰ΩøÁî®ÂàôÊÑèÂë≥ÁùÄÊÇ®Â∞ÜÂêåÊÑèÈÅµÂÆàÊú¨ÂçèËÆÆ‰∏ãÂÖ®ÈÉ®ËßÑÂÆöÔºå‰ª•ÂèäÊàë‰ª¨ÂêéÁª≠ÂØπ‰ΩøÁî®ÂçèËÆÆÈöèÊó∂ÊâÄ‰ΩúÁöÑ‰ªª‰Ωï‰øÆÊîπÔºåÂπ∂ÂÆåÂÖ®Êúç‰ªé‰∫éÊàë‰ª¨ÁöÑÁªü‰∏ÄÁÆ°ÁêÜ„ÄÇÊú¨ÂçèËÆÆÂ∑≤ÂØπ‰∏éÊÇ®ÁöÑÊùÉÁõäÊúâÊàñÂèØËÉΩÂÖ∑ÊúâÈáçÂ§ßÂÖ≥Á≥ªÁöÑÊù°Ê¨æÔºåÂèäÂØπ302.AIÂÖ∑ÊúâÊàñÂèØËÉΩÂÖ∑ÊúâÂÖçË¥£ÊàñÈôêÂà∂Ë¥£‰ªªÁöÑÊù°Ê¨æÁî®Á≤ó‰ΩìÂ≠ó‰∫à‰ª•Ê†áÊ≥®ÔºåËØ∑ÊÇ®Ê≥®ÊÑè„ÄÇ</p>\n" +
            "        <p>ËØ∑Á°ÆËÆ§ÊÇ®ÂÖ∑ÊúâÂÆåÂÖ®Ê∞ë‰∫ãË°å‰∏∫ËÉΩÂäõÔºåÂ¶ÇÊÇ®Â∑≤Âπ¥Êª°18Âë®Â≤ÅÔºåÊàñÊÇ®Â∑≤Âπ¥Êª°16Âë®Â≤Å‰∏î‰æùÈù†Ëá™Â∑±ÁöÑÂä≥Âä®Êî∂ÂÖ•‰Ωú‰∏∫‰∏ªË¶ÅÁîüÊ¥ªÊù•Ê∫êÔºåÂê¶ÂàôËØ∑ÊÇ®ÂÅúÊ≠¢Ê≥®ÂÜåÊàñ‰ΩøÁî®Êú¨ÂçèËÆÆÈ°π‰∏ãÁöÑÊúçÂä°„ÄÇ</p>\n" +
            "\n" +
            "        <h2>Á¨¨‰∏ÄÁ´† ÊÄªÂàô</h2>\n" +
            "        <p>Á¨¨1Êù° 302.AIÔºà‚Äú302.AI‚Äù„ÄÅ‚ÄúÊàë‰ª¨‚ÄùÊàñ‚ÄúÊàë‰ª¨‚ÄùÔºâÊòØÁΩëÁ´ô 302.AIÔºà‚ÄúÊú¨ÁΩëÁ´ô‚ÄùÔºâÔºåÂêëÁî®Êà∑Êèê‰æõÁöÑ‰∏Ä‰∏™ÊåâÁî®Èáè‰ªòË¥πÁöÑ‰ºÅ‰∏öÁ∫ßAIÂπ≥Âè∞„ÄÇ302.AIÂ∞Ü‰∏∫Áî®Êà∑Êèê‰æõÂú®Á∫øÁõ¥Êé•‰ΩøÁî®ÁöÑÂ∫îÁî®Ë∂ÖÂ∏ÇÂíåÈúÄË¶ÅÈÖçÁΩÆÂºÄÂèëÁöÑAPIÁöÑÊúçÂä°„ÄÇ</p>\n" +
            "        <p>Á¨¨2Êù° 302.AIÊâÄÊúâÊùÉ„ÄÅÁªèËê•ÊùÉ„ÄÅÁÆ°ÁêÜÊùÉÂùáÂ±û302.AI„ÄÇ</p>\n" +
            "        <p>Á¨¨3Êù° Êú¨ÂçèËÆÆÊúÄÁªàËß£ÈáäÊùÉÂΩíÂ±û302.AI„ÄÇ</p>\n" +
            "\n" +
            "        <h2>Á¨¨‰∫åÁ´† PTCË¥≠‰π∞ËßÑÂàô</h2>\n" +
            "        <p>Á¨¨4Êù° PTCÊòØ302.AIÂêëÊÇ®Êèê‰æõÁöÑÁî®‰∫éÂú®302.AI‰∏äËøõË°åÁõ∏ÂÖ≥Ê∂àË¥πÁöÑËôöÊãüË¥ßÂ∏ÅÔºåÊÇ®ÂèØ‰ª•Áî®PTCËá™Áî±Ë¥≠‰π∞302.AI‰∏äÂêÑÈ°π‰∫ßÂìÅÊàñÊúçÂä°„ÄÇ‰ΩÜÊòØÔºåPTC‰∏çËÉΩÂÖëÊç¢‰∏∫‰∫∫Ê∞ëÂ∏ÅÊàñÂÖ∂‰ªñ‰ªª‰ΩïË¥ßÂ∏ÅÔºåÊÇ®Â∫îÊ†πÊçÆËá™Â∑±ÁöÑÂÆûÈôÖÈúÄÊ±ÇË¥≠‰π∞Áõ∏Â∫îÊï∞ÈáèÁöÑPTC„ÄÇ</p>\n" +
            "        <p>Á¨¨5Êù° ÊÇ®ÂèØ‰ª•ÈÄöËøá302.AI APP„ÄÅ302.AIÂÆòÁΩë:https://302.ai/Á≠âÊ∏†ÈÅìË¥≠‰π∞PTC„ÄÇ</p>\n" +
            "        <p>Á¨¨6Êù° ‰∫éÊú¨ÂçèËÆÆÁ≠æÁΩ≤Êó•Ôºå‚Äú‰∫∫Ê∞ëÂ∏Å‚ÄùË¥≠‰π∞‚ÄúPTC‚ÄùÁöÑËßÑÂàôÂ¶Ç‰∏ãÔºö</p>\n" +
            "        <ul>\n" +
            "            <li>1 PTC = 1 ÁæéÂÖÉ ‚âà 7 ÂÖÉ‰∫∫Ê∞ëÂ∏Å</li>\n" +
            "            <li>5 PTC = 5 ÁæéÂÖÉ ‚âà 35 ÂÖÉ‰∫∫Ê∞ëÂ∏Å</li>\n" +
            "            <li>20 PTC = 20 ÁæéÂÖÉ ‚âà 140 ÂÖÉ‰∫∫Ê∞ëÂ∏Å</li>\n" +
            "            <li>50 PTC = 50 ÁæéÂÖÉ ‚âà 350 ÂÖÉ‰∫∫Ê∞ëÂ∏Å</li>\n" +
            "            <li>100 PTC = 100 ÁæéÂÖÉ ‚âà 700 ÂÖÉ‰∫∫Ê∞ëÂ∏Å</li>\n" +
            "            <li>200 PTC = 200 ÁæéÂÖÉ ‚âà 1400 ÂÖÉ‰∫∫Ê∞ëÂ∏ÅÔºàËµ†ÈÄÅ20 PTCÔºâ</li>\n" +
            "            <li>500 PTC = 500 ÁæéÂÖÉ ‚âà 3500 ÂÖÉ‰∫∫Ê∞ëÂ∏ÅÔºàËµ†ÈÄÅ50 PTCÔºâ</li>\n" +
            "        </ul>\n" +
            "        <p>302.AI‰øùÁïôÊ†πÊçÆÁõ∏ÂÖ≥Ê≥ïÂæãËßÑÂÆö„ÄÅ‰∏ªÁÆ°ÈÉ®Èó®Ë¶ÅÊ±Ç„ÄÅ‰∏öÂä°ÂºÄÂ±ïÊÉÖÂÜµÁ≠âÂõ†Á¥†ÂØπ‰ΩøÁî®‰∫∫Ê∞ëÂ∏ÅË¥≠‰π∞PTCÁöÑËßÑÂàôËøõË°åÂçïÊñπÈù¢ÂèòÊõ¥„ÄÅË∞ÉÊï¥„ÄÅ‰∏≠Ê≠¢ÊàñÁªàÊ≠¢ÁöÑÊùÉÂà©„ÄÇÊÇ®ÂêåÊÑèÊó†Êù°‰ª∂Êé•ÂèóÂØπ‰∏äËø∞Ë¥≠‰π∞ËßÑÂàôÁöÑÂèòÊõ¥„ÄÅË∞ÉÊï¥„ÄÅ‰∏≠Ê≠¢ÊàñÁªàÊ≠¢Ôºå302.AIÂºÄÂ±ïÂâçËø∞Ë°åÂä®Êó∂Â∞Ü‰ª•‰∫é302.AIÂÖ¨Â∏ÉÁöÑÊñπÂºèÈÄöÁü•ÔºåÂπ∂Ëá™ÂÖ¨Â∏É‰πãÊó•Ëµ∑Ëá™Âä®ÁîüÊïàÔºåËÄåÊó†ÈúÄÂè¶Ë°åÂçïÁã¨ÈÄöÁü•ÊÇ®Ôºå‰πü‰∏çÂ∞±ËØ•Á≠âË°åÂä®ÁªôÊÇ®ÈÄ†ÊàêÁöÑ‰ªª‰ΩïÊçüÂ§±ÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª„ÄÇ</p>\n" +
            "        <p>Á¨¨7Êù° Âú®‰ΩøÁî®ÂÖÖÂÄºÊñπÂºèÊó∂ÔºåÊÇ®Âä°ÂøÖ‰ªîÁªÜÁ°ÆËÆ§Ëá™Â∑±ÁöÑË¥¶Âè∑Âπ∂‰ªîÁªÜÈÄâÊã©Áõ∏ÂÖ≥Êìç‰ΩúÈÄâÈ°π„ÄÇËã•Âõ†‰∏∫ÊÇ®Ëá™Ë∫´ËæìÂÖ•Ë¥¶Âè∑ÈîôËØØ„ÄÅÊìç‰Ωú‰∏çÂΩìÊàñ‰∏ç‰∫ÜËß£ÂÖÖÂÄºËÆ°Ë¥πÊñπÂºèÁ≠âÂõ†Á¥†ÈÄ†ÊàêÂÖÖÈîôË¥¶Âè∑„ÄÅÈîôÈÄâÂÖÖÂÄºÁßçÁ±ªÁ≠âÊÉÖÂΩ¢ËÄåÊçüÂÆ≥Ëá™Ë∫´ÊùÉÁõäÁöÑÔºå302.AIÂ∞Ü‰∏ç‰ºö‰ΩúÂá∫‰ªª‰ΩïË°•ÂÅøÊàñËµîÂÅø„ÄÇ</p>\n" +
            "        <p>Á¨¨8Êù° Ëã•ÊÇ®‰ª•ÈùûÊ≥ïÁöÑÊñπÂºèÔºåÊàñ‰ΩøÁî®Èùû302.AIÊâÄÊåáÂÆöÁöÑÂÖÖÂÄºÊñπÂºèËøõË°åÂÖÖÂÄºÔºå302.AI‰∏ç‰øùËØÅËØ•ÂÖÖÂÄºÈ°∫Âà©ÊàñËÄÖÊ≠£Á°ÆÂÆåÊàê„ÄÇËã•Âõ†Ê≠§ÈÄ†ÊàêÊÇ®ÊùÉÁõäÂèóÊçüÔºå302.AI‰∏ç‰ºö‰ΩúÂá∫‰ªª‰ΩïË°•ÂÅøÊàñËµîÂÅøÔºå302.AIÂêåÊó∂‰øùÁïôÈöèÊó∂ÁªàÊ≠¢ÊÇ®302.AI‰∏™‰∫∫Ë¥¶Âè∑ËµÑÊ†ºÂèä‰ΩøÁî®ÂêÑÈ°πÂÖÖÂÄºÊúçÂä°ÁöÑÊùÉÂà©„ÄÇ</p>\n" +
            "        <p>Á¨¨9Êù° ÂÖÖÂÄºÊàêÂäüÂêéÔºåÂÖÖÂÄºÊâÄÂ¢ûÂä†ÁöÑË¥¶Âè∑ÂÜÖPTCÂèØÁî±ÊÇ®Âú®302.AI‰∏äËá™Áî±‰ΩøÁî®Ôºå‰ΩÜ302.AI‰∏ç‰ºöÊèê‰æõ‰ªª‰ΩïÈÄÄËøòÊàñÈÄÜÂêëÂÖëÊç¢ÊúçÂä°„ÄÇ</p>\n" +
            "        <p>Á¨¨10Êù° Â¶ÇÊûú302.AIÂèëÁé∞Âõ†Á≥ªÁªüÊïÖÈöúÊàñÂÖ∂‰ªñ‰ªª‰ΩïÂéüÂõ†ÂØºËá¥ÁöÑÂ§ÑÁêÜÈîôËØØÔºåÊó†ËÆ∫ÊúâÂà©‰∫é302.AIËøòÊòØÊúâÂà©‰∫éÊÇ®Ôºå302.AIÈÉΩÊúâÊùÉÂú®‰ª•ÁîµÂ≠êÈÇÆ‰ª∂„ÄÅÂæÆ‰ø°ÊàñÂÖ∂‰ªñÂêàÁêÜÊñπÂºèÈÄöÁü•ÊÇ®ÂêéÁ∫†Ê≠£ËØ•ÈîôËØØ„ÄÇÂ¶ÇÊûúËØ•Êé™ÊñΩÂØºËá¥ÊÇ®ÂÆûÈôÖÊî∂Âà∞ÁöÑPTCÊï∞ÈáèÂ∞ë‰∫éÊÇ®Â∫îËé∑ÂæóÁöÑPTCÔºåÂàô302.AIÂú®Á°ÆËÆ§ËØ•Â§ÑÁêÜÈîôËØØÂêé‰ºöÂ∞ΩÂø´Â∞ÜÂ∑ÆÈ¢ùË°•Ë∂≥Ëá≥ÊÇ®ÁöÑ302.AI‰∏™‰∫∫Ë¥¶Êà∑‰∏≠„ÄÇÂ¶ÇÊûúËØ•ÈîôËØØÂØºËá¥ÊÇ®ÂÆûÈôÖÊî∂Âà∞ÁöÑPTCÊï∞ÈáèÂ§ö‰∫éÊÇ®Â∫îËé∑ÂæóÁöÑPTCÔºåÂàôÊó†ËÆ∫ÈîôËØØÁöÑÊÄßË¥®ÂíåÂéüÂõ†Â¶Ç‰ΩïÔºå302.AIÊúâÊùÉ‰ªéÊÇ®ÁöÑ302.AI‰∏™‰∫∫Ë¥¶Êà∑‰∏≠Áõ¥Êé•Êâ£Èô§Â∑ÆÈ¢ù„ÄÇ</p>\n" +
            "\n" +
            "        <h2>Á¨¨‰∏âÁ´† ÊùÉÂà©Â£∞Êòé</h2>\n" +
            "        <p>Á¨¨11Êù° ÊÇ®ÂèØÈöèÊó∂Âú®ÊâãÊú∫APP‰∏äÊü•ÁúãÊÇ®ÁöÑPTCÁöÑ‰ΩôÈ¢ùÊÉÖÂÜµ„ÄÇÂ¶ÇÊÇ®ÂØπËØ•ËÆ∞ÂΩïÊúâÂºÇËÆÆÔºåÂ∫îÁ´ãÂç≥Âêë302.AIÊèêÂá∫Ôºå302.AIÊ†∏ÂØπÂêéÁ°ÆÊúâÈîôËØØÁöÑÔºåÂ∞Ü‰∫à‰ª•Êõ¥Ê≠£ÔºõÂê¶ÂàôÊÇ®ÂêåÊÑè302.AI‰∏äÁöÑ‰∫§ÊòìËÆ∞ÂΩïÂ∞Ü‰Ωú‰∏∫PTC‰∫§ÊòìÁöÑÂîØ‰∏ÄÊúâÊïà‰æùÊçÆ„ÄÇ</p>\n" +
            "        <p>Á¨¨12Êù° 302.AIÊúâÊùÉÂü∫‰∫é‰∫§ÊòìÂÆâÂÖ®Á≠âÊñπÈù¢ÁöÑËÄÉËôë‰∏çÊó∂ËÆæÂÆöÊ∂âÂèä‰∫§ÊòìÁöÑÁõ∏ÂÖ≥‰∫ãÈ°πÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫é‰∫§ÊòìÈôêÈ¢ù„ÄÅ‰∫§ÊòìÊ¨°Êï∞Á≠â„ÄÇÊÇ®‰∫ÜËß£Ôºå302.AIÁöÑÂâçËø∞ËÆæÂÆöÂèØËÉΩÂØπÊÇ®ÁöÑ‰∫§ÊòìÈÄ†Êàê‰∏ÄÂÆö‰∏ç‰æøÔºåÊÇ®ÂØπÊ≠§Ê≤°ÊúâÂºÇËÆÆ„ÄÇ</p>\n" +
            "        <p>Á¨¨13Êù° Âú®‰ªª‰ΩïÊÉÖÂÜµ‰∏ãÔºåÂØπ‰∫éÊÇ®Ë¥≠‰π∞PTCÊó∂Ê∂âÂèäÁî±Á¨¨‰∏âÊñπÊèê‰æõÁõ∏ÂÖ≥ÊúçÂä°ÁöÑË¥£‰ªªÁî±ËØ•Á¨¨‰∏âÊñπÊâøÊãÖÔºå302.AI‰∏çÊâøÊãÖËØ•Á≠âË¥£‰ªª„ÄÇ</p>\n" +
            "        <p>Á¨¨14Êù° ËøõË°åÂÖÖÂÄºÊó∂ÔºåÊÇ®Â∫îÁ°Æ‰øùÊÇ®ÊòØÁªëÂÆöÁöÑÊîØ‰ªòÂÆùË¥¶Êà∑ÊåÅÊúâ‰∫∫ÔºåÂèØÂêàÊ≥ï„ÄÅÊúâÊïà‰ΩøÁî®ËØ•Ë¥¶Êà∑‰∏îÊú™‰æµÁäØ‰ªª‰ΩïÁ¨¨‰∏âÊñπÂêàÊ≥ïÊùÉÁõäÔºåÂê¶ÂàôÂõ†Ê≠§ÈÄ†ÊàêÊîØ‰ªòÂÆùË¥¶Êà∑ÂÆûÈôÖÊâÄÊúâ‰∫∫ÊçüÂ§±ÁöÑÔºåÊÇ®Â∫îÂçïÁã¨Ë¥üË¥£Ëß£ÂÜ≥Áî±Ê≠§‰∫ßÁîüÁöÑÁ∫†Á∫∑Âπ∂ÊâøÊãÖÂÖ®ÈÉ®Ê≥ïÂæãË¥£‰ªª„ÄÇ</p>\n" +
            "        <p>Á¨¨15Êù° Âõ†ÊÇ®Ëá™Ë∫´ÁöÑÂéüÂõ†ÂØºËá¥302.AIÊó†Ê≥ïÊèê‰æõPTCË¥≠‰π∞ÊúçÂä°ÊàñÊèê‰æõPTCË¥≠‰π∞ÊúçÂä°Êó∂ÂèëÁîü‰ªª‰ΩïÈîôËØØËÄå‰∫ßÁîüÁöÑ‰ªª‰ΩïÊçüÂ§±ÊàñË¥£‰ªªÔºåÁî±ÊÇ®Ëá™Ë°åË¥üË¥£Ôºå302.AI‰∏çÊâøÊãÖË¥£‰ªªÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÔºö</p>\n" +
            "        <ul>\n" +
            "            <li>Ôºà1ÔºâÊÇ®Êú™ÊåâÁÖßÊú¨ÂçèËÆÆÊàñ302.AI‰∏çÊó∂ÂÖ¨Â∏ÉÁöÑ‰ªª‰ΩïËßÑÂàôËøõË°åÊìç‰ΩúÔºõ</li>\n" +
            "            <li>Ôºà2ÔºâÂõ†ÊÇ®ÁöÑ‰∏™‰∫∫Ë¥¶Âè∑Â§±Êïà„ÄÅ‰∏¢Â§±„ÄÅË¢´Â∞ÅÂÅúÔºõ</li>\n" +
            "            <li>Ôºà3ÔºâÂõ†ÊÇ®ÁªëÂÆöÁöÑÁ¨¨‰∏âÊñπÊîØ‰ªòÊú∫ÊûÑË¥¶Êà∑ÁöÑÂéüÂõ†ÂØºËá¥ÁöÑÊçüÂ§±ÊàñË¥£‰ªªÔºåÂåÖÊã¨ÊÇ®‰ΩøÁî®Êú™ËÆ§ËØÅÁöÑÁ¨¨‰∏âÊñπÊîØ‰ªòË¥¶Êà∑Êàñ‰ΩøÁî®ÈùûÊÇ®Êú¨‰∫∫ÁöÑÁ¨¨‰∏âÊñπÊîØ‰ªòË¥¶Êà∑ÔºåÊÇ®ÁöÑÁ¨¨‰∏âÊñπÊîØ‰ªòË¥¶Êà∑Ë¢´ÂÜªÁªì„ÄÅÊü•Â∞ÅÁ≠âÔºõ</li>\n" +
            "            <li>Ôºà4ÔºâÊÇ®Â∞ÜÂØÜÁ†ÅÂëäÁü•‰ªñ‰∫∫ÂØºËá¥ÁöÑË¥¢‰∫ßÊçüÂ§±Ôºõ</li>\n" +
            "            <li>Ôºà5ÔºâÂõ†ÊÇ®‰∏™‰∫∫ÁöÑÊïÖÊÑèÊàñÈáçÂ§ßËøáÂ§±ÊâÄÈÄ†ÊàêÁöÑË¥¢‰∫ßÊçüÂ§±„ÄÇ</li>\n" +
            "        </ul>\n" +
            "        <p>Á¨¨16Êù° 302.AIÁ≥ªÁªüÂõ†‰∏ãÂàóÁä∂ÂÜµÊó†Ê≥ïÊ≠£Â∏∏Ëøê‰ΩúÔºå‰ΩøÊÇ®Êó†Ê≥ï‰ΩøÁî®ÂêÑÈ°πÊúçÂä°Êàñ‰ªª‰ΩïËôöÊãüË¥¢‰∫ß‰∏¢Â§±Êó∂Ôºå302.AI‰∏çÊâøÊãÖÊçüÂÆ≥ËµîÂÅøË¥£‰ªªÔºåËØ•Áä∂ÂÜµÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÔºö</p>\n" +
            "        <ul>\n" +
            "            <li>Ôºà1ÔºâÂú®302.AIÂÖ¨Âëä‰πãÁ≥ªÁªüÂÅúÊú∫Áª¥Êä§„ÄÅÂçáÁ∫ß„ÄÅË∞ÉÊï¥ÊúüÈó¥Ôºõ</li>\n" +
            "            <li>Ôºà2ÔºâÁîµ‰ø°ÈÄöËÆØËÆæÂ§áÂá∫Áé∞ÊïÖÈöú‰∏çËÉΩËøõË°åÊï∞ÊçÆ‰º†ËæìÁöÑÔºõ</li>\n" +
            "            <li>Ôºà3ÔºâÂõ†Âè∞È£é„ÄÅÂú∞Èúá„ÄÅÊµ∑Âï∏„ÄÅÊ¥™Ê∞¥„ÄÅÂÅúÁîµ„ÄÅÊàò‰∫â„ÄÅÊÅêÊÄñË¢≠Âáª„ÄÅÊîøÂ∫úÁÆ°Âà∂Á≠â‰∏çÂèØÊäóÂäõ‰πãÂõ†Á¥†ÔºåÈÄ†Êàê302.AIÁ≥ªÁªüÈöúÁ¢ç‰∏çËÉΩÊâßË°å‰∏öÂä°ÁöÑÔºõ</li>\n" +
            "            <li>Ôºà4ÔºâÁî±‰∫éÈªëÂÆ¢ÊîªÂáª„ÄÅÁîµ‰ø°ÈÉ®Èó®ÊäÄÊúØË∞ÉÊï¥ÊàñÊïÖÈöú„ÄÅÁΩëÁ´ôÂçáÁ∫ß„ÄÅÁõ∏ÂÖ≥Á¨¨‰∏âÊñπÁöÑÈóÆÈ¢òÁ≠âÂéüÂõ†ËÄåÈÄ†ÊàêÁöÑÊúçÂä°‰∏≠Êñ≠ÊàñËÄÖÂª∂Ëøü„ÄÇ</li>\n" +
            "        </ul>\n" +
            "\n" +
            "        <h2>Á¨¨ÂõõÁ´† Â§ÑÁΩöËßÑÂàô</h2>\n" +
            "        <p>Á¨¨17Êù° Â¶ÇÂèëÁîü‰∏ãÂàó‰ªª‰Ωï‰∏ÄÁßçÊÉÖÂΩ¢Ôºå302.AIÊúâÊùÉÈöèÊó∂‰∏≠Êñ≠ÊàñÁªàÊ≠¢ÂêëÊÇ®Êèê‰æõÊú¨ÂçèËÆÆÈ°π‰∏ãÁöÑÁΩëÁªúÊúçÂä°ËÄåÊó†ÈúÄÈÄöÁü•ÊÇ®Ôºö(1) ÊÇ®Êèê‰æõÁöÑ‰∏™‰∫∫ËµÑÊñô‰∏çÁúüÂÆûÔºõÔºà2ÔºâÊÇ®ËøùÂèçÊú¨ÂçèËÆÆ‰∏≠ËßÑÂÆöÁöÑË¥≠‰π∞ËßÑÂàô„ÄÇÈô§ÂâçÊ¨æÊâÄËø∞ÊÉÖÂΩ¢Â§ñÔºå302.AIÂêåÊó∂‰øùÁïôÂú®‰∏ç‰∫ãÂÖàÈÄöÁü•ÊÇ®ÁöÑÊÉÖÂÜµ‰∏ãÈöèÊó∂‰∏≠Êñ≠ÊàñÁªàÊ≠¢ÈÉ®ÂàÜÊàñÂÖ®ÈÉ®ÁΩëÁªúÂÖÖÂÄºÊúçÂä°ÁöÑÊùÉÂà©ÔºåÂØπ‰∫éÂÖÖÂÄºÊúçÂä°ÁöÑ‰∏≠Êñ≠ÊàñÁªàÊ≠¢ËÄåÈÄ†ÊàêÁöÑ‰ªª‰ΩïÊçüÂ§±Ôºå302.AIÊó†ÈúÄÂØπÊÇ®Êàñ‰ªª‰ΩïÁ¨¨‰∏âÊñπÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª„ÄÇ</p>\n" +
            "        <p>Á¨¨18Êù° Â¶ÇÊûúÁî®Êà∑ËøùËßÑ‰ΩøÁî®ÈùûÊú¨‰∫∫ËãπÊûúÊâãÊú∫Â∫îÁî®ÂïÜÂ∫ó‰ª£ÂÖÖÂÄºÔºåÊàñËÄÖÈÄöËøáÂÖ∂ÂÆÉÈùû302.AIËÆ§ÂèØÁöÑÊ∏†ÈÅìÈùûÊ≥ïË¥≠‰π∞PTCÔºåÂàô302.AIÊúâÊùÉÂÜªÁªìËØ•Ë¥¶Êà∑ÔºåÂπ∂ËøõË°åÁõ∏Â∫îÊÉ©ÁΩöÔºå‰∏•ÈáçËÄÖÂèØ‰ª•ËøõË°åÂ∞ÅÂè∑Â§ÑÁêÜ„ÄÇ</p>\n" +
            "        <p>Á¨¨19Êù° Áî®Êà∑Âú®‰ΩøÁî®302.AIÊó∂ÔºåÂ¶ÇÂá∫Áé∞ËøùÂèçÂõΩÂÆ∂Ê≥ïÂæãÊ≥ïËßÑ„ÄÅ„ÄäÁî®Êà∑Ê≥®ÂÜåÂçèËÆÆ„ÄãÁ∫¶ÂÆö„ÄÅ„ÄäÁî®Êà∑ÂÖëÊç¢ÂçèËÆÆ„ÄãÁ∫¶ÂÆö„ÄÅÊú¨ÂçèËÆÆÁ∫¶ÂÆöÊàñÂÖ∂‰ªñ302.AIÂØπÁî®Êà∑ÁöÑÁÆ°ÁêÜËßÑÂÆöÁöÑÊÉÖÂΩ¢Ôºå302.AIÊúâÊùÉÊöÇÊó∂ÊàñÊ∞∏‰πÖÂ∞ÅÁ¶ÅÊÇ®ÁöÑË¥¶Âè∑„ÄÇË¥¶Âè∑Â∞ÅÁ¶ÅÂêéËá≥Ëß£Á¶ÅÔºàÂ¶ÇÊúâÔºâÂâçÔºåÊÇ®Ë¥¶Êà∑‰∏äÁöÑÂâ©‰ΩôÁöÑPTCÂ∞ÜË¢´ÊöÇÊó∂ÂÜªÁªìÊàñÂÖ®ÈÉ®Êâ£Èô§Ôºå‰∏çÂèØÁªßÁª≠Áî®‰∫éË¥≠‰π∞Âπ≥Âè∞‰∏äÁöÑËôöÊãü‰∫ßÂìÅÊàñÊúçÂä°ÔºåÂêåÊó∂‰∏ç‰∫àËøîËøòÊÇ®Ë¥≠‰π∞PTCÊó∂ÁöÑÁé∞Èáë‰ª∑ÂÄº„ÄÇ</p>\n" +
            "\n" +
            "        <h2>Á¨¨‰∫îÁ´† ÈôÑÂàô</h2>\n" +
            "        <p>Á¨¨20Êù° 302.AI‰øùÁïô‰øÆÊîπÊàñÂ¢ûË°•Êú¨ÂçèËÆÆÂÜÖÂÆπÁöÑÊùÉÂà©„ÄÇÊú¨ÂçèËÆÆÁöÑ‰øÆÊîπÊñáÊú¨Â∞ÜÂÖ¨Âëä‰∫é302.AIÊàñ‰ª•ÂÖ∂‰ªñ302.AIËÆ§‰∏∫ÂèØË°åÁöÑÊñπÂºèÂÖ¨Âëä„ÄÇ‰øÆÊîπÊñáÊú¨‰∏ÄÊó¶ÂÖ¨Â∏ÉÂàôÁ´ãÂç≥ÁîüÊïàÔºå‰∏îÂØπÁîüÊïàÂâçÁöÑÁî®Êà∑ÂêåÊ†∑ÈÄÇÁî®„ÄÇËã•ÊÇ®Âú®Êú¨ÂçèËÆÆÂÜÖÂÆπÂèëÁîü‰øÆËÆ¢ÂêéÔºåÁªßÁª≠‰ΩøÁî®Êú¨ÊúçÂä°ÁöÑÔºåÂàôËßÜ‰∏∫ÊÇ®ÂêåÊÑèÊúÄÊñ∞‰øÆËÆ¢ÁöÑÂçèËÆÆÂÜÖÂÆπÔºõÂê¶ÂàôÊÇ®È°ªÁ´ãÂç≥ÂÅúÊ≠¢‰ΩøÁî®Êú¨ÊúçÂä°„ÄÇ</p>\n" +
            "        <p>Á¨¨21Êù° Âõ†Êú¨ÂçèËÆÆÂºïËµ∑ÁöÑÊàñ‰∏éÊú¨ÂçèËÆÆÊúâÂÖ≥ÁöÑ‰∫âËÆÆÔºåÂùáÈÄÇÁî®‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÊ≥ïÂæã„ÄÇ</p>\n" +
            "        <p>Á¨¨22Êù° Âõ†Êú¨ÂçèËÆÆÂºïËµ∑ÁöÑÊàñ‰∏éÊú¨ÂçèËÆÆÊúâÂÖ≥ÁöÑ‰∫âËÆÆÔºå302.AI‰∏éÊÇ®Â∞ÜÂçèÂïÜËß£ÂÜ≥„ÄÇÂçèÂïÜ‰∏çÊàêÁöÑÔºå‰ªª‰Ωï‰∏ÄÊñπÂùáÊúâÊùÉÂêëÊú¨ÂçèËÆÆÁ≠æËÆ¢Âú∞ÊúâÁÆ°ËæñÊùÉÁöÑÊ≥ïÈô¢ÊèêËµ∑ËØâËÆº„ÄÇ</p>\n" +
            "        <p>Á¨¨23Êù° Êú¨ÂçèËÆÆÈÉ®ÂàÜÂÜÖÂÆπË¢´ÊúâÁÆ°ËæñÊùÉÁöÑÊ≥ïÈô¢ËÆ§ÂÆö‰∏∫ËøùÊ≥ïÊàñÊó†ÊïàÁöÑÔºå‰∏çÂõ†Ê≠§ÂΩ±ÂìçÂÖ∂‰ªñÂÜÖÂÆπÁöÑÊïàÂäõ„ÄÇ</p>\n" +
            "        <p>Á¨¨24Êù° Êú¨ÂçèËÆÆÊú™Ê∂âÂèäÁöÑÈóÆÈ¢òÂèÇËßÅÂõΩÂÆ∂ÊúâÂÖ≥Ê≥ïÂæãÊ≥ïËßÑÔºåÂΩìÊú¨ÂçèËÆÆ‰∏éÂõΩÂÆ∂Ê≥ïÂæãÊ≥ïËßÑÂÜ≤Á™ÅÊó∂Ôºå‰ª•ÂõΩÂÆ∂Ê≥ïÂæãÊ≥ïËßÑ‰∏∫ÂáÜ„ÄÇ</p>\n" +
            "    </div>\n" +
            "</body>\n" +
            "</html>".trimIndent()

    val payProtocolUrlJa = "<!DOCTYPE html>\n" +
            "<html lang=\"zh-CN\">\n" +
            "<head>\n" +
            "    <meta charset=\"UTF-8\">\n" +
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n" +
            "    <title>„É¶„Éº„Ç∂„Éº„É™„ÉÅ„É£„Éº„Ç∏Â•ëÁ¥Ñ</title>\n" +
            "    <style>\n" +
            "        body {\n" +
            "            font-family: \"Microsoft Yahei\", sans-serif;\n" +
            "            line-height: 1.6;\n" +
            "            margin: 20px;\n" +
            "            color: #333;\n" +
            "        }\n" +
            "        .container {\n" +
            "            max-width: 800px;\n" +
            "            margin: 0 auto;\n" +
            "            background-color: #fff;\n" +
            "            padding: 20px;\n" +
            "            border: 1px solid #ddd;\n" +
            "            border-radius: 5px;\n" +
            "            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n" +
            "        }\n" +
            "        h1 {\n" +
            "            text-align: center;\n" +
            "            color: #333;\n" +
            "        }\n" +
            "        h2 {\n" +
            "            color: #333;\n" +
            "            margin-top: 20px;\n" +
            "            padding-bottom: 5px;\n" +
            "            border-bottom: 1px solid #eee;\n" +
            "        }\n" +
            "        p {\n" +
            "            margin: 10px 0;\n" +
            "        }\n" +
            "        ul {\n" +
            "            margin: 10px 0;\n" +
            "            padding-left: 20px;\n" +
            "        }\n" +
            "        li {\n" +
            "            margin: 5px 0;\n" +
            "        }\n" +
            "        .highlight {\n" +
            "            font-weight: bold;\n" +
            "        }\n" +
            "    </style>\n" +
            "</head>\n" +
            "<body>\n" +
            "    <div class=\"container\">\n" +
            "        <h1>„Ää„É¶„Éº„Ç∂„Éº„É™„ÉÅ„É£„Éº„Ç∏Â•ëÁ¥Ñ„Äã</h1>\n" +
            "        <p>„É¶„Éº„Ç∂„Éº„ÅÆÁöÜÊßò„ÄÅÊú¨Â•ëÁ¥Ñ„Å´ÂêåÊÑè„Åô„ÇãÂâç„Å´„ÄÅ302.AI„ÅÆÂêÑÁ®ÆË¶èÂâá„Åä„Çà„Å≥Ë¶Å‰ª∂„ÄÅ„Å™„Çâ„Å≥„Å´„Åì„ÅÆÁ®Æ„ÅÆ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊÉÖÂ†±„Çµ„Éº„Éì„Çπ„Å´Èñ¢„Åô„ÇãÂõΩÂÜÖÊ≥ï„Åä„Çà„Å≥Ë¶èÂà∂„Çí„Çà„Åè„ÅäË™≠„Åø„Å´„Å™„Çä„ÄÅÂçÅÂàÜ„Å´ÁêÜËß£„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÊú¨Â•ëÁ¥Ñ„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÊù°È†Ö„Å´Áï∞Ë≠∞„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅÊú¨Â•ëÁ¥Ñ„ÅÆÈÅ©Áî®„Çí‰∏≠Ê≠¢„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇÊú¨Â•ëÁ¥Ñ„ÅÆÈÅ©Áî®„ÅØ„ÄÅÊú¨Â•ëÁ¥Ñ„ÅÆ„Åô„Åπ„Å¶„ÅÆÊù°È†Ö„ÄÅ„Å™„Çâ„Å≥„Å´ÂΩìÁ§æ„ÅåÈöèÊôÇÂ§âÊõ¥„Åô„ÇãÂà©Áî®Ë¶èÁ¥Ñ„ÅÆÊù°È†Ö„ÇíÈÅµÂÆà„Åó„ÄÅÂΩìÁ§æ„ÅÆÁµ±‰∏ÄÁöÑ„Å™ÁÆ°ÁêÜ„Å´ÂÆåÂÖ®„Å´Âæì„ÅÜ„Åì„Å®„Å´ÂêåÊÑè„Åô„Çã„Åì„Å®„ÇíÊÑèÂë≥„Åó„Åæ„Åô„ÄÇÊú¨Â•ëÁ¥Ñ„Åß„ÅØ„ÄÅ„ÅäÂÆ¢Êßò„ÅÆÊ®©Âà©„Åä„Çà„Å≥Âà©Áõä„Å´ÈáçÂ§ß„Å™ÂΩ±Èüø„Çí‰∏é„Åà„Çã„ÄÅ„Åæ„Åü„ÅØÈáçÂ§ß„Å™ÂΩ±Èüø„Çí‰∏é„Åà„ÇãÂèØËÉΩÊÄß„ÅÆ„ÅÇ„ÇãÊù°È†Ö„ÄÅ„Åä„Çà„Å≥302.AI„ÅÆË≤¨‰ªª„ÇíÂÖçÈô§„Åæ„Åü„ÅØÂà∂Èôê„Åô„Çã„ÄÅ„Åæ„Åü„ÅØÂÖçÈô§„Åæ„Åü„ÅØÂà∂Èôê„Åô„ÇãÂèØËÉΩÊÄß„ÅÆ„ÅÇ„ÇãÊù°È†Ö„ÅåÂ§™Â≠ó„ÅßÁ§∫„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„ÅîÊ≥®ÊÑè„Åè„Å†„Åï„ÅÑ„ÄÇ</p>\n" +
            " <p>„ÅäÂÆ¢Êßò„Åå18Ê≠≥‰ª•‰∏ä„Åß„ÅÇ„Çã„ÄÅ„Åæ„Åü„ÅØ16Ê≠≥‰ª•‰∏ä„Åß‰∏ª„Å™ÂèéÂÖ•Ê∫ê„Å®„Åó„Å¶Âä¥ÂÉçÂèéÂÖ•„Å´‰æùÂ≠ò„Åó„Å¶„ÅÑ„Çã„Å™„Å©„ÄÅÂÆåÂÖ®„Å™Ê∞ë‰∫ãË°åÁÇ∫ËÉΩÂäõ„ÇíÊúâ„Åó„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åù„ÅÜ„Åß„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÊú¨Â•ëÁ¥Ñ„Å´Âü∫„Å•„Åè„Çµ„Éº„Éì„Çπ„ÅÆÁôªÈå≤„Åæ„Åü„ÅØÂà©Áî®„Çí‰∏≠Ê≠¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>\n" +
            "\n" +
            " <h2>Á¨¨1Á´† Á∑èÂâá</h2>\n" +
            " <p>Á¨¨1Êù° 302.AIÔºà‰ª•‰∏ã„Äå302.AI„Äç„Åæ„Åü„ÅØ„ÄåÂΩìÁ§æ„ÄçÔºâ„ÅØ„ÄÅ302.AI„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„ÉàÔºà‰ª•‰∏ã„ÄåÊú¨„Çµ„Ç§„Éà„ÄçÔºâ„Åß„ÅÇ„Çä„ÄÅ„É¶„Éº„Ç∂„Éº„Å´ÂæìÈáèË™≤ÈáëÂà∂„ÅÆ„Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫„É¨„Éô„É´AI„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ302.AI„ÅØ„ÄÅ„É¶„Éº„Ç∂„Éº„Å´Áõ¥Êé•Âà©Áî®ÂèØËÉΩ„Å™„Ç™„É≥„É©„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Çπ„Éà„Ç¢„Å®„ÄÅË®≠ÂÆö„Åä„Çà„Å≥ÈñãÁô∫„ÇíÂøÖË¶Å„Å®„Åô„ÇãAPI„Çµ„Éº„Éì„Çπ„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨2Êù° 302.AI„ÅØ„ÄÅÊâÄÊúâÊ®©„ÄÅÈÅãÂñ∂Ê®©„ÄÅ„Åä„Çà„Å≥ÁÆ°ÁêÜÊ®©„ÇíÊúâ„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨3Êù° 302.AI„ÅØ„ÄÅÊú¨Â•ëÁ¥Ñ„ÅÆÊúÄÁµÇÁöÑ„Å™Ëß£ÈáàÊ®©„ÇíÊúâ„Åó„Åæ„Åô„ÄÇ</p>\n" +
            "\n" +
            " <h2>Á¨¨2Á´† PTCË≥ºÂÖ•Ë¶èÂâá</h2>\n" +
            " <p>Á¨¨4Êù° PTC„Å®„ÅØ„ÄÅ302.AI„ÅåÈñ¢ÈÄ£„Åô„ÇãË≥ºÂÖ•„ÅÆ„Åü„ÇÅ„Å´Êèê‰æõ„Åô„Çã‰ªÆÊÉ≥ÈÄöË≤®„Åß„Åô„ÄÇ 302.AI„ÄÇPTC„ÅØ„ÄÅ302.AI‰∏ä„ÅßÊßò„ÄÖ„Å™ÂïÜÂìÅ„ÇÑ„Çµ„Éº„Éì„Çπ„ÇíËá™Áî±„Å´„ÅîË≥ºÂÖ•„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÄÇ„Åü„Å†„Åó„ÄÅPTC„ÅØ‰∫∫Ê∞ëÂÖÉÔºàRMBÔºâ„Åæ„Åü„ÅØ„Åù„ÅÆ‰ªñ„ÅÆÈÄöË≤®„Å®‰∫§Êèõ„Åô„Çã„Åì„Å®„ÅØ„Åß„Åç„Åæ„Åõ„Çì„ÄÇÂÆüÈöõ„ÅÆ„Éã„Éº„Ç∫„Å´Âøú„Åò„Å¶„ÄÅÂøÖË¶Å„Å™ÈáëÈ°ç„ÅÆPTC„Çí„ÅîË≥ºÂÖ•„Åè„Å†„Åï„ÅÑ„ÄÇ</p>\n" +
            " <p>Á¨¨5Êù° PTC„ÅØ„ÄÅ302.AI„Ç¢„Éó„É™„ÄÅ302.AIÂÖ¨Âºè„Ç¶„Çß„Éñ„Çµ„Ç§„ÉàÔºàhttps://302.ai/Ôºâ„ÄÅ„Åù„ÅÆ‰ªñ„ÅÆ„ÉÅ„É£„Éç„É´„ÇíÈÄö„Åò„Å¶„ÅîË≥ºÂÖ•„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨6Êù° Êú¨Â•ëÁ¥ÑÁ∑†ÁµêÊó•ÁèæÂú®„ÄÅ‰∫∫Ê∞ëÂÖÉ„ÅßPTC„Çí„ÅîË≥ºÂÖ•„ÅÑ„Åü„Å†„ÅèÂ†¥Âêà„ÅÆ„É´„Éº„É´„ÅØ‰ª•‰∏ã„ÅÆ„Å®„Åä„Çä„Åß„Åô„ÄÇ</p>\n" +
            " <ul>\n" +
            " <li>1 PTC = 1 USD ‚âà 7 RMB</li>\n" +
            " <li>5 PTC = 5 USD ‚âà 35 RMB</li>\n" +
            " <li>20 PTC = 20 USD ‚âà 140 RMB</li>\n" +
            " <li>50 PTC = 50 USD ‚âà 350 RMB</li>\n" +
            " <li>100 PTC = 100 USD ‚âà 700 RMB</li>\n" +
            " <li>200 PTC = 200 USD ‚âà 1400 RMB (20 PTC„Éú„Éº„Éä„Çπ‰ªò„Åç)</li>\n" +
            " <li>500 PTC = USD 500 ‚âà 3500 RMB (50 PTC„Éú„Éº„Éä„Çπ‰ªò„Åç)</li>\n" +
            " </ul>\n" +
            " <p>302.AI„ÅØ„ÄÅÈñ¢ÈÄ£Ê≥ï„ÄÅË¶èÂà∂Ë¶Å‰ª∂„ÄÅ‰∫ãÊ•≠Â±ïÈñã„ÄÅ„Åù„ÅÆ‰ªñ„ÅÆË¶ÅÂõ†„Å´Âü∫„Å•„Åç„ÄÅ‰∫∫Ê∞ëÂÖÉ„Åß„ÅÆPTCË≥ºÂÖ•„Å´Èñ¢„Åô„ÇãË¶èÂâá„Çí‰∏ÄÊñπÁöÑ„Å´Â§âÊõ¥„ÄÅË™øÊï¥„ÄÅÂÅúÊ≠¢„ÄÅ„Åæ„Åü„ÅØÁµÇ‰∫Ü„Åô„ÇãÊ®©Âà©„ÇíÁïô‰øù„Åó„Åæ„Åô„ÄÇ„ÅäÂÆ¢Êßò„ÅØ„ÄÅ‰∏äË®ò„ÅÆË≥ºÂÖ•Ë¶èÂâá„ÅÆÂ§âÊõ¥„ÄÅË™øÊï¥„ÄÅÂÅúÊ≠¢„ÄÅ„Åæ„Åü„ÅØÁµÇ‰∫Ü„ÇíÁÑ°Êù°‰ª∂„Å´Âèó„ÅëÂÖ•„Çå„Çã„Åì„Å®„Å´ÂêåÊÑè„Åô„Çã„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇ302.AI„ÅØ„ÄÅÂ§âÊõ¥„ÄÅË™øÊï¥„ÄÅÂÅúÊ≠¢„ÄÅ„Åæ„Åü„ÅØÁµÇ‰∫Ü„Åå„ÅÇ„Å£„ÅüÂ†¥Âêà„ÅØ„ÄÅ„ÅäÂÆ¢Êßò„Å´ÈÄöÁü•„Åó„Åæ„Åô„ÄÇ‰∏äË®ò„ÅÆË≥ºÂÖ•Ë¶èÂâá„ÅØ„ÄÅ302.AI‰∏ä„Å´ÂÖ¨Èñã„Åô„Çã„Åì„Å®„Å´„Çà„ÇäÁµÇ‰∫Ü„Åô„Çã„ÇÇ„ÅÆ„Å®„Åó„ÄÅ„Åì„Çå„Çâ„ÅÆÂ§âÊõ¥„ÅØ„ÄÅÂÖ¨ÈñãÊó•„Åã„ÇâËá™ÂãïÁöÑ„Å´ÊúâÂäπ„Å®„Å™„Çä„ÄÅ„ÅäÂÆ¢Êßò„Å∏„ÅÆÈÄöÁü•„Å™„Åó„Å´ÊúâÂäπ„Å®„Å™„Çä„ÄÅ302.AI„ÅØ„ÄÅ„Åã„Åã„ÇãË°åÁÇ∫„Å´„Çà„Å£„Å¶„ÅäÂÆ¢Êßò„Å´Áîü„Åò„Åü„ÅÑ„Åã„Å™„ÇãÊêçÂÆ≥„Å´„Å§„ÅÑ„Å¶„ÇÇ‰∏ÄÂàáË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì„ÄÇ</p>\n" +
            " <p>Á¨¨7Êù° „Éà„ÉÉ„Éó„Ç¢„ÉÉ„ÉóÊñπÊ≥ï„Çí„ÅîÂà©Áî®„ÅÆÈöõ„ÅØ„ÄÅ„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÊÖéÈáç„Å´Á¢∫Ë™ç„Åó„ÄÅÈñ¢ÈÄ£„Åô„Çã„Ç™„Éó„Ç∑„Éß„É≥„ÇíÊÖéÈáç„Å´ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË™§„Å£„Åü„Ç¢„Ç´„Ç¶„É≥„ÉàÂÖ•Âäõ„ÄÅ‰∏çÈÅ©Âàá„Å™Êìç‰Ωú„ÄÅ„Éà„ÉÉ„Éó„Ç¢„ÉÉ„ÉóË™≤ÈáëÊñπÊ≥ï„ÅÆÁêÜËß£‰∏çË∂≥„Å™„Å©„ÅÆË¶ÅÂõ†„Å´„Çà„Çä„ÄÅË™§„Å£„Åü„Ç¢„Ç´„Ç¶„É≥„Éà„Å´„ÉÅ„É£„Éº„Ç∏„Åó„Åü„Çä„ÄÅË™§„Å£„Åü„Éà„ÉÉ„Éó„Ç¢„ÉÉ„Éó„Çø„Ç§„Éó„ÇíÈÅ∏Êäû„Åó„Åü„Çä„Åô„Çã„Åì„Å®„Åß„ÅäÂÆ¢Êßò„ÅÆÊ®©Âà©Âà©Áõä„ÇíÊêç„Å™„Å£„ÅüÂ†¥Âêà„ÄÅ302.AI„ÅØ„ÅÑ„Åã„Å™„ÇãË≥†ÂÑü„Åæ„Åü„ÅØË£úÂÑü„ÇÇË°å„ÅÑ„Åæ„Åõ„Çì„ÄÇ</p>\n" +
            " <p>Á¨¨8Êù° „ÅäÂÆ¢Êßò„ÅåÈÅïÊ≥ï„Å™ÊâãÊÆµ„Åß„ÉÅ„É£„Éº„Ç∏„Åó„Åü„Çä„ÄÅ302.AI„ÅåÊåáÂÆö„Åó„Å¶„ÅÑ„Å™„ÅÑ„Éà„ÉÉ„Éó„Ç¢„ÉÉ„ÉóÊñπÊ≥ï„Çí‰ΩøÁî®„Åó„Åü„Çä„Åó„ÅüÂ†¥Âêà„ÄÅ302.AI„ÅØ„Éà„ÉÉ„Éó„Ç¢„ÉÉ„Éó„Åå„Çπ„É†„Éº„Ç∫„Å´„Åæ„Åü„ÅØÊ≠£Á¢∫„Å´ÂÆå‰∫Ü„Åô„Çã„Åì„Å®„Çí‰øùË®º„Åó„Åæ„Åõ„Çì„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÅäÂÆ¢Êßò„ÅÆÊ®©Âà©Âà©Áõä„ÅåÊêç„Å™„Çè„Çå„ÅüÂ†¥Âêà„ÄÅ302.AI„ÅØ„ÅÑ„Åã„Å™„ÇãË≥†ÂÑü„Åæ„Åü„ÅØË£úÂÑü„ÇÇË°å„ÅÑ„Åæ„Åõ„Çì„ÄÇ 302.AI„ÅØ„ÄÅ„ÅäÂÆ¢Êßò„ÅÆ302.AIÂÄã‰∫∫„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆË≥áÊ†º„Åä„Çà„Å≥ÂêÑÁ®Æ„Éà„ÉÉ„Éó„Ç¢„ÉÉ„Éó„Çµ„Éº„Éì„Çπ„ÅÆÂà©Áî®„Çí„ÅÑ„Å§„Åß„ÇÇÁµÇ‰∫Ü„Åô„ÇãÊ®©Âà©„ÇíÁïô‰øù„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨9Êù° „Éà„ÉÉ„Éó„Ç¢„ÉÉ„Éó„ÅåÂÆå‰∫Ü„Åô„Çã„Å®„ÄÅ„ÅäÂÆ¢Êßò„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„Å´ËøΩÂä†„Åï„Çå„ÅüPTC„ÅØ302.AI„ÅßËá™Áî±„Å´„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„Åô„Åå„ÄÅ302.AI„ÅØËøîÈáë„Åæ„Åü„ÅØ‰∫§Êèõ„Çµ„Éº„Éì„Çπ„ÇíÊèê‰æõ„Åó„Åæ„Åõ„Çì„ÄÇ</p>\n" +
            " <p>Á¨¨10Êù° 302.AI„ÅØ„ÄÅ„Ç∑„Çπ„ÉÜ„É†ÈöúÂÆ≥„Åæ„Åü„ÅØ„Åù„ÅÆ‰ªñ„ÅÆÁêÜÁî±„Å´„Çà„Çä„ÄÅ302.AI„Åæ„Åü„ÅØ„ÅäÂÆ¢Êßò„ÅÆÂà©Áõä„Å´„Åã„Åã„Çè„Çâ„Åö„ÄÅÂá¶ÁêÜ„Ç®„É©„Éº„ÇíÁô∫Ë¶ã„Åó„ÅüÂ†¥Âêà„ÄÅE„É°„Éº„É´„ÄÅWeChat„ÄÅ„Åæ„Åü„ÅØ„Åù„ÅÆ‰ªñ„ÅÆÂêàÁêÜÁöÑ„Å™ÊâãÊÆµ„Åß„ÅäÂÆ¢Êßò„Å´ÈÄöÁü•„Åó„ÅüÂæå„ÄÅ„Ç®„É©„Éº„Çí‰øÆÊ≠£„Åô„ÇãÊ®©Âà©„ÇíÁïô‰øù„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆÊé™ÁΩÆ„Å´„Çà„Çä„ÄÅ„ÅäÂÆ¢Êßò„ÅåÂÆüÈöõ„Å´Âèó„ÅëÂèñ„ÇãPTC„ÅÆÊï∞„Åå„ÄÅ„ÅäÂÆ¢Êßò„ÅåÂèó„ÅëÂèñ„Çã„Åπ„ÅçÈáëÈ°ç„Çà„Çä„ÇÇÂ∞ë„Å™„Åè„Å™„ÇãÂ†¥Âêà„ÄÅ302.AI„ÅØÂá¶ÁêÜ„Ç®„É©„Éº„ÇíÁ¢∫Ë™ç„Åó„ÅüÂæå„ÄÅÈÄü„ÇÑ„Åã„Å´„ÅäÂÆ¢Êßò„ÅÆ302.AIÂÄã‰∫∫„Ç¢„Ç´„Ç¶„É≥„Éà„Å´Â∑ÆÈ°ç„ÇíËøîÈáë„Åó„Åæ„Åô„ÄÇ 302.AI„ÅØ„ÄÅ„Ç®„É©„Éº„ÅÆÊÄßË≥™„ÇÑÂéüÂõ†„Å´Èñ¢„Çè„Çâ„Åö„ÄÅ„ÅäÂÆ¢Êßò„ÅåÂèó„ÅëÂèñ„Çã„Åπ„ÅçÈáëÈ°ç„Çà„Çä„ÇÇÂ§ö„ÅèÂèó„ÅëÂèñ„Å£„ÅüÂ†¥Âêà„ÄÅ„Åù„ÅÆÂ∑ÆÈ°ç„Çí„ÅäÂÆ¢Êßò„ÅÆ302.AIÂÄã‰∫∫„Ç¢„Ç´„Ç¶„É≥„Éà„Åã„ÇâÁõ¥Êé•Â∑Æ„ÅóÂºï„ÅèÊ®©Âà©„ÇíÁïô‰øù„Åó„Åæ„Åô„ÄÇ</p>\n" +
            "\n" +
            " <h2>Á¨¨3Á´† Ê®©Âà©Ë°®Êòé</h2>\n" +
            " <p>Á¨¨11Êù° PTCÊÆãÈ´ò„ÅØ„É¢„Éê„Ç§„É´„Ç¢„Éó„É™„Åß„ÅÑ„Å§„Åß„ÇÇÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇË®òÈå≤„Å´Áï∞Ë≠∞„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅÁõ¥„Å°„Å´302.AI„Å´ÊèêÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ302.AI„ÅØ„Ç®„É©„Éº„ÇíÁ¢∫Ë™ç„Åó„ÄÅÁô∫Ë¶ã„Åï„Çå„ÅüÂ†¥Âêà„ÅØ‰øÆÊ≠£„Åó„Åæ„Åô„ÄÇ„Åù„Çå‰ª•Â§ñ„ÅÆÂ†¥Âêà„ÄÅ„ÅäÂÆ¢Êßò„ÅØ302.AI‰∏ä„ÅÆÂèñÂºïË®òÈå≤„ÅåPTCÂèñÂºï„ÅÆÂîØ‰∏Ä„ÅÆÊúâÂäπ„Å™Ê†πÊã†„Å®„Å™„Çã„Åì„Å®„Å´ÂêåÊÑè„Åô„Çã„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨12Êù° 302.AI„ÅØ„ÄÅÂèñÂºï„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÔºàÂèñÂºïÈôêÂ∫¶È°ç„ÇÑÂèñÂºïÊôÇÈñì„Å™„Å©„ÇíÂê´„ÇÄ„Åå„Åì„Çå„Çâ„Å´ÈôêÂÆö„Åï„Çå„Å™„ÅÑÔºâ„Å™„Å©„ÇíËÄÉÊÖÆ„Åó„ÄÅÂèñÂºïÈñ¢ÈÄ£‰∫ãÈ†Ö„ÇíÈöèÊôÇË®≠ÂÆö„Åô„ÇãÊ®©Âà©„ÇíÊúâ„Åó„Åæ„Åô„ÄÇ„ÅäÂÆ¢Êßò„ÅØ„ÄÅ302.AI„Å´„Çà„Çã‰∏äË®ò„ÅÆË®≠ÂÆö„Å´„Çà„Çä„ÄÅ </p>\n" +
            " <p>Á¨¨13Êù° „ÅÑ„Åã„Å™„ÇãÂ†¥Âêà„Åß„ÇÇ„ÄÅPTCË≥ºÂÖ•ÊôÇ„Å´Á¨¨‰∏âËÄÖ„ÅåÊèê‰æõ„Åô„ÇãÈñ¢ÈÄ£„Çµ„Éº„Éì„Çπ„Å´Èñ¢„Åô„ÇãË≤¨‰ªª„ÅØÁ¨¨‰∏âËÄÖ„ÅåË≤†„ÅÜ„ÇÇ„ÅÆ„Å®„Åó„ÄÅ302.AI„ÅØ„Åù„ÅÆ„Çà„ÅÜ„Å™Ë≤¨‰ªª„ÇíË≤†„Çè„Å™„ÅÑ„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨14Êù° „ÉÅ„É£„Éº„Ç∏„ÇíË°å„ÅÜÈöõ„ÅØ„ÄÅ„ÅäÂÆ¢Êßò„ÅåÂΩìË©≤Alipay„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÊâÄÊúâËÄÖ„Åß„ÅÇ„Çã„Åì„Å®„ÄÅ„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂêàÊ≥ï„Åã„Å§ÊúâÂäπ„Å´‰ΩøÁî®„Åß„Åç„Çã„Åì„Å®„ÄÅ„Åä„Çà„Å≥Á¨¨‰∏âËÄÖ„ÅÆÊ≥ïÁöÑÊ®©Âà©„Çí‰æµÂÆ≥„Åó„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„Çí‰øùË®º„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Åù„ÅÜ„Åß„Å™„ÅÑÂ†¥Âêà„ÄÅAlipay„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂÆüÈöõ„ÅÆÊâÄÊúâËÄÖ„Åå„Åù„ÅÆÁµêÊûúÊêçÂ§±„ÇíË¢´„Å£„ÅüÂ†¥Âêà„ÄÅ„ÅäÂÆ¢Êßò„ÅØÁµêÊûú„Å®„Åó„Å¶Áîü„Åò„ÇãÁ¥õ‰∫â„ÅÆËß£Ê±∫„Å´ÂçòÁã¨„ÅßË≤¨‰ªª„ÇíË≤†„ÅÑ„ÄÅ„Åô„Åπ„Å¶„ÅÆÊ≥ïÁöÑË≤¨‰ªª„ÇíË≤†„ÅÜ„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨15Êù° 302.AI„ÅåPTCË≥ºÂÖ•„Çµ„Éº„Éì„Çπ„ÇíÊèê‰æõ„Åß„Åç„Å™„ÅÑ„Åì„Å®„ÄÅ„Åæ„Åü„ÅØ„ÅäÂÆ¢ÊßòËá™Ë∫´„ÅÆÁêÜÁî±„Å´„Çà„ÇäPTCË≥ºÂÖ•„Çµ„Éº„Éì„Çπ„ÅÆÊèê‰æõ„Å´Ë™§„Çä„Åå„ÅÇ„Å£„Åü„Åì„Å®„Å´Ëµ∑Âõ†„Åô„ÇãÊêçÂ§±„Åæ„Åü„ÅØË≤¨‰ªª„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅ„ÅäÂÆ¢Êßò„ÅåÂçòÁã¨„ÅßË≤¨‰ªª„ÇíË≤†„ÅÜ„ÇÇ„ÅÆ„Å®„Åó„ÄÅ302.AI„ÅØË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì„ÄÇ„Åì„Çå„Å´„ÅØ‰ª•‰∏ã„ÅåÂê´„Åæ„Çå„Åæ„Åô„Åå„ÄÅ„Åì„Çå„Çâ„Å´ÈôêÂÆö„Åï„Çå„Åæ„Åõ„Çì„ÄÇ</p>\n" +
            " <ul>\n" +
            " <li>Ôºà1Ôºâ„ÅäÂÆ¢Êßò„ÅåÊú¨Â•ëÁ¥Ñ„Åæ„Åü„ÅØ302.AI„ÅåÈöèÊôÇÁô∫Ë°å„Åô„ÇãË¶èÂâá„Å´Âæì„Å£„Å¶Êìç‰Ωú„ÇíË°å„Çè„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÄÇ</li>\n" +
            " <li>Ôºà2Ôºâ„ÅäÂÆ¢Êßò„ÅÆÂÄã‰∫∫ÊÉÖÂ†±„Åå„Ç¢„Ç´„Ç¶„É≥„Éà„ÅåÁÑ°Âäπ„ÄÅÁ¥õÂ§±„ÄÅ„Åæ„Åü„ÅØ„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÇ</li>\n" +
            " <li>(3) „ÅäÂÆ¢Êßò„ÅåÁ¥ê‰ªò„Åë„ÅüÁ¨¨‰∏âËÄÖÊ±∫Ê∏àÊ©üÈñ¢„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„Å´Èñ¢ÈÄ£„Åô„Çã‰∫ãÁî±ÔºàË™çË®º„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÁ¨¨‰∏âËÄÖÊ±∫Ê∏à„Ç¢„Ç´„Ç¶„É≥„Éà„Åæ„Åü„ÅØ„ÅäÂÆ¢ÊßòËá™Ë∫´„ÅÆ„ÇÇ„ÅÆ„Åß„ÅØ„Å™„ÅÑÁ¨¨‰∏âËÄÖÊ±∫Ê∏à„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ‰ΩøÁî®„ÄÅÁ¨¨‰∏âËÄÖÊ±∫Ê∏à„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂáçÁµê„Åæ„Åü„ÅØÂ∞ÅÂç∞„Å™„Å©Ôºâ„Å´„Çà„ÇäÁô∫Áîü„Åó„ÅüÊêçÂ§±„Åæ„Åü„ÅØË≤¨‰ªª„ÄÇ</li>\n" +
            " <li>(4) „ÅäÂÆ¢Êßò„Åå„Éë„Çπ„ÉØ„Éº„Éâ„Çí‰ªñ‰∫∫„Å´ÈñãÁ§∫„Åó„Åü„Åì„Å®„Å´Ëµ∑Âõ†„Åô„ÇãË≤°Áî£ÁöÑÊêçÂ§±„ÄÇ</li>\n" +
            " <li>(5) „ÅäÂÆ¢Êßò„ÅÆÂÄã‰∫∫ÁöÑ„Å™ÊïÖÊÑè„Åæ„Åü„ÅØÈáçÂ§ß„Å™ÈÅéÂ§±„Å´„Çà„ÇäÁô∫Áîü„Åó„ÅüË≤°Áî£ÁöÑÊêçÂ§±„ÄÇ</li>\n" +
            " </ul>\n" +
            " <p>Á¨¨16Êù° 302.AI„Ç∑„Çπ„ÉÜ„É†„ÅØ„ÄÅ‰ª•‰∏ã„ÅÆÁä∂Ê≥Å„Å´„Çà„ÇäÊ≠£Â∏∏„Å´Âãï‰Ωú„Åõ„Åö„ÄÅ„ÅäÂÆ¢Êßò„ÅåÂêÑÁ®Æ„Çµ„Éº„Éì„Çπ„ÇíÂà©Áî®„Åß„Åç„Å™„Åè„Å™„Å£„Åü„Çä„ÄÅ‰ªÆÊÉ≥Ë≥áÁî£„ÅåÂ§±„Çè„Çå„Åü„Çä„Åó„ÅüÂ†¥Âêà„ÄÅ302.AI„ÅØ„ÄÅ‰ª•‰∏ã„ÇíÂê´„ÇÄ„Åå„Åì„Çå„Å´ÈôêÂÆö„Åï„Çå„Å™„ÅÑÊêçÂÆ≥„Å´„Å§„ÅÑ„Å¶Ë≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì„ÄÇ</p>\n" +
            " <ul>\n" +
            " <li>(1) 302.AI„ÅåÂëäÁü•„Åô„Çã„Ç∑„Çπ„ÉÜ„É†„É°„É≥„ÉÜ„Éä„É≥„Çπ„ÄÅ„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„ÄÅË™øÊï¥ÊúüÈñì‰∏≠„ÄÇ</li>\n" +
            " <li>(2) ÈÄö‰ø°Ë®≠ÂÇô„Å´ÊïÖÈöú„ÅåÁô∫Áîü„Åó„ÄÅ„Éá„Éº„Çø„ÅÆÈÄÅ‰ø°„Åå‰∏çÂèØËÉΩ„Å´„Å™„Å£„ÅüÂ†¥Âêà„ÄÇ</li>\n" +
            " <li>(3) Âè∞È¢®„ÄÅÂú∞Èúá„ÄÅÊ¥•Ê≥¢„ÄÅÊ¥™Ê∞¥„ÄÅÂÅúÈõª„ÄÅÊà¶‰∫â„ÄÅ„ÉÜ„É≠ÊîªÊíÉ„ÄÅÊîøÂ∫úË¶èÂà∂„Å™„Å©„ÅÆ‰∏çÂèØÊäóÂäõ„Å´„Çà„Çä„ÄÅ302.AI„Ç∑„Çπ„ÉÜ„É†„ÅåÊ•≠Âãô„ÇíÈÅÇË°å„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÄÇ</li>\n" +
            " <li>(4) „Éè„ÉÉ„Ç´„ÉºÊîªÊíÉ„ÄÅÈÄö‰ø°ÈÉ®ÈñÄ„ÅÆÊäÄË°ìË™øÊï¥„Åæ„Åü„ÅØÊïÖÈöú„ÄÅ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆ„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„ÄÅÈñ¢ÈÄ£„Åô„ÇãÁ¨¨‰∏âËÄÖ„ÅÆÂïèÈ°å„Å™„Å©„Å´„Çà„Çä„ÄÅ„Çµ„Éº„Éì„Çπ„ÅÆ‰∏≠Êñ≠„Åæ„Åü„ÅØÈÅÖÂª∂„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÇ</li>\n" +
            " </ul>\n" +
            "\n" +
            " <h2>Á¨¨4Á´† ÁΩ∞Ââá</h2>\n" +
            " <p>Á¨¨17Êù° ‰ª•‰∏ã„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÁä∂Ê≥Å„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÅ 302.AI„ÅØ„ÄÅ‰ª•‰∏ã„ÅÆÂ†¥Âêà„ÄÅ„ÅäÂÆ¢Êßò„Å´ÈÄöÁü•„Åô„Çã„Åì„Å®„Å™„Åè„ÄÅ„ÅÑ„Å§„Åß„ÇÇÊú¨Â•ëÁ¥Ñ„Å´Âü∫„Å•„Åè„ÅäÂÆ¢Êßò„Å∏„ÅÆ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Çµ„Éº„Éì„Çπ„ÅÆÊèê‰æõ„Çí‰∏≠Êñ≠„Åæ„Åü„ÅØÁµÇ‰∫Ü„Åô„ÇãÊ®©Âà©„ÇíÊúâ„Åó„Åæ„Åô„ÄÇ(1) „ÅäÂÆ¢Êßò„ÅåÊèê‰æõ„Åô„ÇãÂÄã‰∫∫ÊÉÖÂ†±„ÅåÁúüÂÆü„Åß„Å™„ÅÑÂ†¥Âêà„ÄÇ(2) „ÅäÂÆ¢Êßò„ÅåÊú¨Â•ëÁ¥Ñ„Å´ÂÆö„ÇÅ„ÇãË≥ºÂÖ•Ë¶èÂâá„Å´ÈÅïÂèç„Åó„ÅüÂ†¥Âêà„ÄÇÂâçÈ†Ö„Å´Ë¶èÂÆö„Åô„ÇãÁä∂Ê≥Å„Å´Âä†„Åà„Å¶„ÄÅ302.AI„ÅØ„ÄÅ„ÅäÂÆ¢Êßò„Å´‰∫ãÂâç„Å´ÈÄöÁü•„Åô„Çã„Åì„Å®„Å™„Åè„ÄÅ„ÅÑ„Å§„Åß„ÇÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É™„ÉÅ„É£„Éº„Ç∏„Çµ„Éº„Éì„Çπ„ÅÆ‰∏ÄÈÉ®„Åæ„Åü„ÅØÂÖ®ÈÉ®„Çí‰∏≠Êñ≠„Åæ„Åü„ÅØÁµÇ‰∫Ü„Åô„ÇãÊ®©Âà©„ÇÇÁïô‰øù„Åó„Åæ„Åô„ÄÇ302.AI„ÅØ„ÄÅ„É™„ÉÅ„É£„Éº„Ç∏„Çµ„Éº„Éì„Çπ„ÅÆ‰∏≠Êñ≠„Åæ„Åü„ÅØÁµÇ‰∫Ü„Å´„Çà„Å£„Å¶Áîü„Åò„Åü„ÅäÂÆ¢Êßò„Åæ„Åü„ÅØÁ¨¨‰∏âËÄÖ„ÅÆÊêçÂÆ≥„Å´„Å§„ÅÑ„Å¶„ÄÅ‰∏ÄÂàá„ÅÆË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì„ÄÇ</p>\n" +
            " <p>Á¨¨18Êù° „É¶„Éº„Ç∂„Éº„ÅåÊú¨Ë¶èÂâá„Å´ÈÅïÂèç„Åó„ÄÅËá™Ë∫´„ÅÆApple„É¢„Éê„Ç§„É´„Ç¢„Éó„É™„Çπ„Éà„Ç¢‰ª•Â§ñ„ÅÆ„Çπ„Éà„Ç¢„Åß„É™„ÉÅ„É£„Éº„Ç∏„ÇíË°å„Å£„ÅüÂ†¥Âêà„ÄÅ„Åæ„Åü„ÅØ302.AI„ÅåÊâøË™ç„Åó„Å¶„ÅÑ„Å™„ÅÑ‰ªñ„ÅÆ„ÉÅ„É£„Éç„É´„ÇíÈÄö„Åò„Å¶PTC„Çí‰∏çÊ≠£„Å´Ë≥ºÂÖ•„Åó„ÅüÂ†¥Âêà„ÄÅ302.AI„ÅØ„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂáçÁµê„Åó„ÄÅ„Åù„Çå„Å´Âøú„Åò„ÅüÁΩ∞Ââá„ÇíÁßë„ÅôÊ®©Âà©„ÇíÊúâ„Åó„Åæ„Åô„ÄÇÈáçÂ§ß„Å™Â†¥Âêà„Å´„ÅØ„ÄÅ„Ç¢„Ç´„Ç¶„É≥„Éà„Åå„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨18Êù°19 „É¶„Éº„Ç∂„Éº„Åå302.AI„ÅÆÂà©Áî®‰∏≠„Å´„ÄÅÂõΩÂÜÖÊ≥ïË¶è„ÄÅ„É¶„Éº„Ç∂„ÉºÁôªÈå≤Â•ëÁ¥Ñ„ÄÅ„É¶„Éº„Ç∂„ÉºÂÑüÈÇÑÂ•ëÁ¥Ñ„ÄÅÊú¨Â•ëÁ¥Ñ„ÄÅ„Åæ„Åü„ÅØ„Åù„ÅÆ‰ªñ„ÅÆ302.AI„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜË¶èÂâá„Å´ÈÅïÂèç„Åó„ÅüÂ†¥Âêà„ÄÅ302.AI„ÅØ„É¶„Éº„Ç∂„Éº„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰∏ÄÊôÇÁöÑ„Åæ„Åü„ÅØÊ∞∏‰πÖÁöÑ„Å´Á¶ÅÊ≠¢„Åô„ÇãÊ®©Âà©„ÇíÁïô‰øù„Åó„Åæ„Åô„ÄÇ„Ç¢„Ç´„Ç¶„É≥„Éà„ÅåÁ¶ÅÊ≠¢„Åï„Çå„ÅüÊôÇÁÇπ„Åã„ÇâËß£Èô§„Åï„Çå„Çã„Åæ„ÅßÔºàË©≤ÂΩì„Åô„ÇãÂ†¥ÂêàÔºâ„ÄÅ„Ç¢„Ç´„Ç¶„É≥„Éà„Å´ÊÆã„Å£„Å¶„ÅÑ„ÇãPTC„ÅØ‰∏ÄÊôÇÁöÑ„Å´ÂáçÁµê„Åï„Çå„Çã„ÅãÂÖ®È°çÂ∑Æ„ÅóÂºï„Åã„Çå„ÄÅ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†‰∏ä„Åß‰ªÆÊÉ≥Ë£ΩÂìÅ„Åæ„Åü„ÅØ„Çµ„Éº„Éì„Çπ„ÇíË≥ºÂÖ•„Åô„Çã„Åü„ÇÅ„Å´‰ΩøÁî®„Åß„Åç„Å™„Åè„Å™„Çä„Åæ„Åô„ÄÇPTCË≥ºÂÖ•„ÅÆÁèæÈáë‰æ°ÂÄ§„ÅØËøîÈáë„Åï„Çå„Åæ„Åõ„Çì„ÄÇ</p>\n" +
            "\n" +
            " <h2>Á¨¨5Á´† Ë£úË∂≥Ë¶èÂÆö</h2>\n" +
            " <p>Á¨¨20Êù° 302.AI„ÅØ„ÄÅÊú¨Â•ëÁ¥Ñ„ÅÆÂÜÖÂÆπ„ÇíÂ§âÊõ¥„Åæ„Åü„ÅØË£úË∂≥„Åô„ÇãÊ®©Âà©„ÇíÁïô‰øù„Åó„Åæ„Åô„ÄÇÊú¨Â•ëÁ¥Ñ„ÅÆÊîπË®ÇÁâà„ÅØ„ÄÅ302.AI„Åæ„Åü„ÅØ302.AI„ÅåÈÅ©Âàá„Å®Âà§Êñ≠„Åô„Çã„Åù„ÅÆ‰ªñ„ÅÆÊñπÊ≥ï„ÅßÁô∫Ë°®„Åï„Çå„Åæ„Åô„ÄÇÊîπË®ÇÁâà„ÅØÂÖ¨ÈñãÂæåÁõ¥„Å°„Å´Áô∫Âäπ„Åó„ÄÅÊú¨Ë¶èÁ¥Ñ„ÅÆÊîπË®Ç„ÅØ„ÄÅÁô∫ÂäπÂâç„Å´Âà©Áî®ËÄÖ„Å´ÈÅ©Áî®„Åï„Çå„Åæ„Åô„ÄÇÊú¨Ë¶èÁ¥Ñ„ÅÆÂÜÖÂÆπ„ÅåÊîπË®Ç„Åï„Çå„ÅüÂæå„ÇÇÂºï„ÅçÁ∂ö„ÅçÊú¨„Çµ„Éº„Éì„Çπ„ÇíÂà©Áî®„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅÊúÄÊñ∞„ÅÆÊîπË®ÇÂÜÖÂÆπ„Å´ÂêåÊÑè„Åó„Åü„ÇÇ„ÅÆ„Å®„Åø„Å™„Åï„Çå„Åæ„Åô„ÄÇ„Åù„ÅÜ„Åß„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÁõ¥„Å°„Å´Êú¨„Çµ„Éº„Éì„Çπ„ÅÆÂà©Áî®„Çí‰∏≠Ê≠¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>\n" +
            " <p>Á¨¨21Êù° Êú¨Ë¶èÁ¥Ñ„Å´Ëµ∑Âõ†„Åæ„Åü„ÅØÈñ¢ÈÄ£„Åô„Çã„Åô„Åπ„Å¶„ÅÆÁ¥õ‰∫â„ÅØ„ÄÅ‰∏≠ËèØ‰∫∫Ê∞ëÂÖ±ÂíåÂõΩ„ÅÆÊ≥ïÂæã„Å´Ê∫ñÊã†„Åô„Çã„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨22Êù° Êú¨Ë¶èÁ¥Ñ„Å´Ëµ∑Âõ†„Åæ„Åü„ÅØÈñ¢ÈÄ£„Åô„Çã„Åô„Åπ„Å¶„ÅÆÁ¥õ‰∫â„ÅØ„ÄÅ302.AI„Å®Âà©Áî®ËÄÖ„Å®„ÅÆÈñì„ÅÆÂçîË≠∞„Å´„Çà„ÇäËß£Ê±∫„Åï„Çå„Çã„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇÂçîË≠∞„Å´„Çà„ÇäÂêàÊÑè„Å´Ëá≥„Çâ„Å™„ÅÑÂ†¥Âêà„ÄÅ„ÅÑ„Åö„Çå„ÅÆÂΩì‰∫ãËÄÖ„ÇÇ„ÄÅÊú¨Ë¶èÁ¥Ñ„ÅåÁ∑†Áµê„Åï„Çå„ÅüÂ†¥ÊâÄ„ÇíÁÆ°ËΩÑ„Åô„ÇãË£ÅÂà§ÊâÄ„Å´Ë®¥Ë®ü„ÇíÊèêËµ∑„Åô„ÇãÊ®©Âà©„ÇíÊúâ„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " <p>Á¨¨23Êù° Êú¨Ë¶èÁ¥Ñ„ÅÆ‰∏ÄÈÉ®„ÅåÁÆ°ËΩÑË£ÅÂà§ÊâÄ„Å´„Çà„Å£„Å¶ÈÅïÊ≥ï„Åæ„Åü„ÅØÁÑ°Âäπ„Å®Âà§Êñ≠„Åï„Çå„ÅüÂ†¥Âêà„Åß„ÇÇ„ÄÅ„Åù„ÅÆ‰ªñ„ÅÆÂÜÖÂÆπ„ÅÆÊúâÂäπÊÄß„ÅØÂΩ±Èüø„ÇíÂèó„Åë„Åæ„Åõ„Çì„ÄÇ</p>\n" +
            " <p>Á¨¨24Êù° Êú¨Ë¶èÁ¥Ñ„Å´Ë¶èÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ‰∫ãÈ†Ö„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅÊú¨Â•ëÁ¥Ñ„ÅÆÈÅ©Áî®ÁØÑÂõ≤„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅÈñ¢ÈÄ£„Åô„ÇãÂõΩÂÜÖÊ≥ï‰ª§„Çí„ÅîÂèÇÁÖß„Åè„Å†„Åï„ÅÑ„ÄÇÊú¨Â•ëÁ¥Ñ„Å®ÂõΩÂÜÖÊ≥ï‰ª§„ÅåÊäµËß¶„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅÂõΩÂÜÖÊ≥ï‰ª§„ÅåÂÑ™ÂÖà„Åô„Çã„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇ</p>\n" +
            " </div>\n" +
            "</body>\n" +
            "</html>".trimIndent()

    val payProtocolUrlEn = "<!DOCTYPE html>\n" +
            "<html lang=\"zh-CN\">\n" +
            "<head>\n" +
            "    <meta charset=\"UTF-8\">\n" +
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n" +
            "    <title>User Recharge Agreement</title>\n" +
            "    <style>\n" +
            "        body {\n" +
            "            font-family: \"Microsoft Yahei\", sans-serif;\n" +
            "            line-height: 1.6;\n" +
            "            margin: 20px;\n" +
            "            color: #333;\n" +
            "        }\n" +
            "        .container {\n" +
            "            max-width: 800px;\n" +
            "            margin: 0 auto;\n" +
            "            background-color: #fff;\n" +
            "            padding: 20px;\n" +
            "            border: 1px solid #ddd;\n" +
            "            border-radius: 5px;\n" +
            "            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n" +
            "        }\n" +
            "        h1 {\n" +
            "            text-align: center;\n" +
            "            color: #333;\n" +
            "        }\n" +
            "        h2 {\n" +
            "            color: #333;\n" +
            "            margin-top: 20px;\n" +
            "            padding-bottom: 5px;\n" +
            "            border-bottom: 1px solid #eee;\n" +
            "        }\n" +
            "        p {\n" +
            "            margin: 10px 0;\n" +
            "        }\n" +
            "        ul {\n" +
            "            margin: 10px 0;\n" +
            "            padding-left: 20px;\n" +
            "        }\n" +
            "        li {\n" +
            "            margin: 5px 0;\n" +
            "        }\n" +
            "        .highlight {\n" +
            "            font-weight: bold;\n" +
            "        }\n" +
            "    </style>\n" +
            "</head>\n" +
            "<body>\n" +
            "    <div class=\"container\">\n" +
            "        <h1>„ÄäUser Recharge Agreement„Äã</h1>\n" +
            "<p>Dear user, before agreeing to this Agreement, please carefully read and fully understand the various rules and requirements of 302.AI, as well as the national laws and regulations regarding this type of internet information services. If you object to any term of this Agreement, you may choose not to use it; using it means that you agree to abide by all provisions of this Agreement, as well as any subsequent modifications we may make to the Terms of Use at any time, and fully submit to our unified management. This Agreement has marked in bold the terms that are or may be material to your rights and interests, and the terms that have or may exempt or limit the liability of 302.AI. Please pay attention. </p>\n" +
            " <p>Please confirm that you have full civil capacity, such as being 18 years of age or older, or being 16 years of age or older and relying on your own labor income as your primary source of income. Otherwise, please stop registering or using the services under this Agreement. </p>\n" +
            "\n" +
            " <h2>Chapter 1 General Provisions</h2>\n" +
            " <p>Article 1 302.AI ('302.AI', 'we', or 'us') is the website 302.AI ('this website'), which provides users with a pay-per-use enterprise-level AI platform. 302.AI will provide users with an online application supermarket for direct use and API services that require configuration and development. </p>\n" +
    " <p>Article 2 The ownership, operation rights, and management rights of 302.AI belong to 302.AI. </p>\n" +
    " <p>Article 3 The final right of interpretation of this Agreement belongs to 302.AI. </p>\n" +
    "\n" +
    " <h2>Chapter 2 PTC Purchase Rules</h2>\n" +
    " <p>Article 4 PTC is the virtual currency provided by 302.AI for related purchases on 302.AI. You can use PTC to freely purchase various products or services on 302.AI. However, PTC cannot be exchanged for RMB or any other currency. You should purchase the appropriate amount of PTC based on your actual needs. </p>\n" +
    " <p>Article 5 You can purchase PTC through channels such as the 302.AI app and the 302.AI official website: https://302.ai/. </p>\n" +
    " <p>Article 6: As of the date of this Agreement, the rules for purchasing PTC with RMB are as follows:</p>\n" +
    " <ul>\n" +
    " <li>1 PTC = US$1 ‚âà RMB 7</li>\n" +
    " <li>5 PTC = US$5 ‚âà RMB 35</li>\n" +
    " <li>20 PTC = US$20 ‚âà RMB 140</li>\n" +
    " <li>50 PTC = US$50 ‚âà RMB 350</li>\n" +
    " <li>100 PTC = US$100 ‚âà RMB 700</li>\n" +
    " <li>200 PTC = US$200 ‚âà RMB 1400 (with 20 PTC bonus)</li>\n" +
    " <li>500 PTC = 500 USD ‚âà 3500 RMB (with 50 PTC bonus)</li>\n" +
    "</ul>\n" +
    " <p>302.AI reserves the right to unilaterally change, adjust, suspend, or terminate the rules for purchasing PTC using RMB based on relevant laws, regulatory requirements, business development, and other factors. You agree to unconditionally accept any changes, adjustments, suspension, or termination of these purchase rules. 302.AI will notify you of any such changes, adjustments, suspension, or termination by posting them on 302.AI, and these changes will automatically take effect from the date of posting without further notice to you, and 302.AI will not be liable for any losses incurred by you as a result of such actions.</p>\n" +
    " <p>Article 7: When using a top-up method, you must carefully verify your account and select the relevant options. 302.AI will not provide any compensation or reimbursement for any damages to your rights and interests caused by incorrect account number entry, improper operation, or lack of understanding of top-up billing methods. </p>\n" +
    " <p>Article 8 If you recharge in an illegal manner or using a recharge method not specified by 302.AI, 302.AI does not guarantee that the recharge will be completed smoothly or correctly. If your rights and interests are damaged as a result, 302.AI will not make any compensation or compensation. 302.AI also reserves the right to terminate your 302.AI personal account qualifications and use of various recharge services at any time. </p>\n" +
    " <p>Article 9 After a successful recharge, the PTC added to your account can be freely used on 302.AI, but 302.AI will not provide any refund or reverse exchange service. </p>\n" +
    " <p>Article 10 If 302.AI discovers a processing error caused by system failure or any other reason, regardless of whether it is beneficial to 302.AI or you, 302.AI has the right to correct the error after notifying you by email, WeChat or other reasonable means. If this action results in you receiving less PTC than you should have received, 302.AI will promptly credit the difference to your 302.AI personal account after confirming the processing error. If this error results in you receiving more PTC than you should have received, 302.AI reserves the right to directly deduct the difference from your 302.AI personal account, regardless of the nature and cause of the error. </p>\n" +
    "\n" +
    " <h2>Chapter 3 Rights Statement</h2>\n" +
    " <p>Article 11 You may check your PTC balance at any time on the mobile app. If you have any objections to this record, you should immediately notify 302.AI. If 302.AI verifies that an error is confirmed, it will be corrected. Otherwise, you agree that the transaction record on 302.AI will serve as the sole valid basis for PTC transactions. </p>\n" +
    " <p>Article 12 302.AI reserves the right to set transaction-related matters from time to time based on considerations such as transaction security, including but not limited to transaction limits and transaction times. You understand that the aforementioned settings of 302.AI may cause certain inconveniences to your transactions, and you have no objection to this. </p>\n" +
    " <p>Article 13 In any case, the responsibility for the services provided by a third party when you purchase PTC shall be borne by the third party, and 302.AI shall not bear such responsibility. </p>\n" +
    " <p>Article 14 When making a top-up, you shall ensure that you are the holder of the bound Alipay account, that you can use the account legally and effectively, and that you have not infringed upon the legal rights of any third party. Otherwise, if any losses are caused to the actual owner of the Alipay account, you shall be solely responsible for resolving any disputes arising therefrom and bear all legal liability. </p>\n" +
    " <p>Article 15 You are solely responsible for any losses or liabilities arising from 302.AI's inability to provide PTC purchase services or any errors in providing PTC purchase services due to your own reasons, and 302.AI shall not be liable, including but not limited to:</p>\n" +
    " <ul>\n" +
    " <li>Ôºà1ÔºâYou fail to operate in accordance with this Agreement or any rules announced by 302.AI from time to time;</li>\n" +
    " <li>Ôºà2ÔºâYour personal account is invalid, lost, or blocked;</li>\n" +
    " <li>Ôºà3ÔºâLosses or liabilities caused by reasons related to your bound third-party payment institution account, including your use of an unauthenticated third-party payment account or a third-party payment account that is not yours, your third-party payment account is frozen or sealed, etc.;</li>\n" +
    " <li>Ôºà4ÔºâProperty losses caused by your disclosure of your password to others;</li>\n" +
    " <li>(5) Property loss caused by your personal intentional or gross negligence. </li>\n" +
    " </ul>\n" +
    " <p>Article 16 302.AI system fails to operate normally due to the following conditions, which makes you unable to use various services or lose any virtual property. 302.AI shall not be liable for damages. Such conditions include but are not limited to: </p>\n" +
    " <ul>\n" +
    " <li>(1) During the system downtime maintenance, upgrade, and adjustment period announced by 302.AI; </li>\n" +
    " <li>(2) Telecommunications equipment fails and data transmission cannot be carried out; </li>\n" +
    " <li>(3) Due to force majeure factors such as typhoons, earthquakes, tsunamis, floods, power outages, wars, terrorist attacks, government regulations, etc., 302.AI system is blocked and cannot perform business; </li>\n" +
    " <li>(4) Service interruption or delay due to hacker attacks, technical adjustments or failures of telecommunications departments, website upgrades, problems with related third parties, etc. </li>\n" +
    " </ul>\n" +
    "\n" +
    " <h2>Chapter 4 Penalty Rules</h2>\n" +
    " <p>Article 17 If any of the following circumstances occurs, 302.AI has the right to interrupt or terminate the provision of network services to you under this Agreement at any time without notifying you: (1) The personal information you provide is untrue; (2) You violate the purchase rules stipulated in this Agreement. In addition to the circumstances described in the preceding paragraph, 302.AI also reserves the right to interrupt or terminate part or all of the network recharge service at any time without prior notice to you. 302.AI does not need to bear any responsibility for any losses caused by the interruption or termination of the recharge service. </p>\n" +
    " <p>Article 18 If a user violates regulations by using an Apple App Store account not authorized by the user, or illegally purchases PTC through other channels not approved by 302.AI, 302.AI reserves the right to freeze the account and impose penalties. In serious cases, the account may be blocked. </p>\n" +
    " <p>Article 19: If a user violates national laws and regulations, the User Registration Agreement, the User Redemption Agreement, this Agreement, or other 302.AI user management regulations while using 302.AI, 302.AI reserves the right to temporarily or permanently block your account. From the time your account is blocked until it is unblocked (if any), the remaining PTC in your account will be temporarily frozen or fully deducted and cannot be used to purchase virtual products or services on the platform. The cash value of your PTC purchase will not be refunded. </p>\n" +
    "\n" +
    " <h2>Chapter V Supplementary Provisions</h2>\n" +
    " <p>Article 20 302.AI reserves the right to modify or supplement the contents of this Agreement. The revised text of this Agreement will be announced on 302.AI or in other ways that 302.AI deems feasible. The revised text will take effect immediately upon publication and will also apply to users before it takes effect. If you continue to use this service after the content of this Agreement is revised, it will be deemed that you agree to the latest revised content of the Agreement; otherwise, you must immediately stop using this service. </p>\n" +
    " <p>Article 21 All disputes arising from or related to this Agreement shall be subject to the laws of the People's Republic of China. </p>\n" +
    " <p>Article 22 All disputes arising from or related to this Agreement shall be resolved through negotiation between 302.AI and you. If no agreement is reached through negotiation, either party shall have the right to file a lawsuit in the court with jurisdiction over the place where this Agreement was signed. </p>\n" +
    " <p>Article 23 If part of this Agreement is found to be illegal or invalid by a court with jurisdiction, the validity of other contents shall not be affected thereby. </p>\n" +
    " <p>Article 24 For matters not covered by this Agreement, please refer to relevant national laws and regulations. In the event of a conflict between this Agreement and national laws and regulations, national laws and regulations shall prevail. </p>\n" +
    " </div>\n" +
    "</body>\n" +
    "</html>".trimIndent()


}